name: Build & Deploy Go App to AlmaLinux VPS (Podman)

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: deploy

    steps:
      # 1️⃣ Checkout source code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION || '1.24' }}

      # 3️⃣ Decide target VPS based on branch
      - name: Set deployment target
        id: vars
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "Server A selected for main branch"
            echo "VPS_HOST=${{ secrets.VPS_HOST }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.VPS_USER }}" >> $GITHUB_ENV
            echo "APP_NAME=${{ secrets.APP_NAME }}" >> $GITHUB_ENV
            echo "APP_PORT=${{ secrets.APP_PORT }}" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT=${{ secrets.ENV_FILE_CONTENT }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "Server B selected for dev branch"
            echo "VPS_HOST=${{ secrets.VPS_HOST_B }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.VPS_USER_B }}" >> $GITHUB_ENV
            echo "APP_NAME=${{ secrets.APP_NAME_B }}" >> $GITHUB_ENV
            echo "APP_PORT=${{ secrets.APP_PORT_B }}" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT=${{ secrets.ENV_FILE_CONTENT_B }}" >> $GITHUB_ENV
          fi

      # 4️⃣ Debug essential variables
      - name: Debug deployment config
        run: |
          echo "VPS_HOST=${VPS_HOST}"
          echo "VPS_USER=${VPS_USER}"
          echo "APP_NAME=${APP_NAME}"
          echo "APP_PORT=${APP_PORT}"

      # 5️⃣ Build Go binary
      - name: Build Go binary
        run: |
          echo "🏗️ Building Go app..."
          go mod tidy
          go build -o app cmd/main.go
          ls -lh app

      # 6️⃣ Prepare VPS (create app directory and stop old container)
      - name: Prepare VPS via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Preparing VPS environment..."
            mkdir -p ~/app
            cd ~/app
            podman stop ${{ env.APP_NAME }} || true
            podman rm ${{ env.APP_NAME }} || true

      # 7️⃣ Upload binary to VPS
      - name: Upload binary
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./app"
          target: "~/app/app"

      # 8️⃣ Deploy Go app in Podman
      - name: Run Podman container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Running Go app in Podman..."

            cd ~/app

            # Create .env file if available
            if [ ! -z "${{ env.ENV_FILE_CONTENT }}" ]; then
              echo "${{ env.ENV_FILE_CONTENT }}" > .env
            fi

            # Create Dockerfile
            cat > Dockerfile <<'EOF'
            FROM golang:1.24
            WORKDIR /app
            COPY app .
            COPY .env .env
            ENV TZ=${{ secrets.TZ || 'Asia/Jakarta' }}
            EXPOSE ${{ env.APP_PORT }}
            CMD ["./app"]
            EOF

            podman build -t ${{ env.APP_NAME }}:latest .
            podman run -d --name ${{ env.APP_NAME }} \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              --network e-klinik-track_e-klinik \
              --env-file /home/${{ env.VPS_USER }}/app/.env \
              ${{ env.APP_NAME }}:latest

            echo "✅ App running on port ${{ env.APP_PORT }}"
