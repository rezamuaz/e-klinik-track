name: Build & Deploy Go App to AlmaLinux VPS (Podman)

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: almalinux-10
    environment: deploy

    steps:
      # 1️⃣ Checkout source code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION || '1.24' }}

      # 3️⃣ Decide target VPS based on branch
      - name: Set deployment target based on branch
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "Deploying to Production Server"
            echo "VPS_HOST=${{ secrets.VPS_HOST }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.VPS_USER }}" >> $GITHUB_ENV
            echo "APP_NAME=${{ secrets.APP_NAME }}" >> $GITHUB_ENV
            echo "APP_PORT=${{ secrets.APP_PORT }}" >> $GITHUB_ENV
            echo "${{ secrets.ENV_FILE_CONTENT }}" > env_file_content
          elif [[ "$BRANCH" == "dev" ]]; then
            echo "Deploying to Development Server"
            echo "VPS_HOST=${{ secrets.VPS_HOST_B }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.VPS_USER_B }}" >> $GITHUB_ENV
            echo "APP_NAME=${{ secrets.APP_NAME_B }}" >> $GITHUB_ENV
            echo "APP_PORT=${{ secrets.APP_PORT_B }}" >> $GITHUB_ENV
            echo "${{ secrets.ENV_FILE_CONTENT_B }}" > env_file_content
          else
            echo "🚫 No deploy target for this branch."
            exit 1
          fi
      # 4️⃣ Debug essential variables (optional)
      - name: Debug Info
        run: |
          echo "Branch: ${GITHUB_REF##*/}"
          echo "VPS_HOST: $VPS_HOST"
          echo "VPS_USER: $VPS_USER"
          echo "APP_NAME: $APP_NAME"
          echo "APP_PORT: $APP_PORT"

      # 4️⃣ Build Go binary
      - name: Build Go binary
        run: |
          echo "🏗️ Building Go app..."
          go mod tidy
          go build -o app cmd/main.go
          ls -lh app

      # 5️⃣ Deploy ke VPS (buat direktori & stop container lama)
      - name: Prepare VPS via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Preparing VPS environment..."
            mkdir -p ~/app
            cd ~/app
            podman stop ${{ secrets.APP_NAME || 'api-server' }} || true
            podman rm ${{ secrets.APP_NAME || 'api-server' }} || true

      # 6️⃣ Upload binary ke VPS
      - name: Upload binary
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./app"
          target: "~/app/app"

      # 7️⃣ Jalankan container baru di VPS
      - name: Run Podman container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Running Go app in Podman..."

            cd ~/app

            # Buat .env dari secret
            if [ ! -z "${{ secrets.ENV_FILE_CONTENT }}" ]; then
              echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
            fi

            # Buat Dockerfile
            cat > Dockerfile <<'EOF'
            FROM golang:1.24
            WORKDIR /app
            COPY app .
            COPY .env .env
            ENV TZ=${{ secrets.TZ || 'Asia/Jakarta' }}
            EXPOSE ${{ secrets.APP_PORT || '7777' }}
            CMD ["./app"]
            EOF

            podman build -t ${{ secrets.APP_NAME || 'api-server' }}:latest .
            podman run -d --name ${{ secrets.APP_NAME || 'api-server' }} \
              -p ${{ secrets.APP_PORT || '7777' }}:${{ secrets.APP_PORT || '7777' }} \
              --network e-klinik-track_e-klinik \
              --env-file /home/deploy/.env \
              ${{ secrets.APP_NAME || 'api-server' }}:latest

            echo "✅ App is running on port ${{ secrets.APP_PORT || '7777' }}"
