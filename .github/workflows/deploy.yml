name: Build & Deploy Go App to AlmaLinux VPS (Podman)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: deploy

    steps:
      # 1️⃣ Checkout source code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION || '1.24' }}

      # 3️⃣ Debug all secrets
      - name: Debug all GitHub Secrets
        run: |
          echo "🔍 DEBUGGING ALL SECRETS"
          echo "------------------------------------"
          echo "VPS_HOST: ${{ secrets.VPS_HOST }}"
          echo "VPS_USER: ${{ secrets.VPS_USER }}"
          echo "APP_NAME: ${{ secrets.APP_NAME }}"
          echo "APP_PORT: ${{ secrets.APP_PORT }}"
          echo "GO_VERSION: ${{ secrets.GO_VERSION }}"
          echo "TZ: ${{ secrets.TZ }}"
          echo "------------------------------------"

          # Periksa SSH Key
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "❌ VPS_SSH_KEY is empty!"
          else
            echo "✅ VPS_SSH_KEY is loaded (hidden)"
          fi

          # Periksa ENV file
          if [ -z "${{ secrets.ENV_FILE_CONTENT }}" ]; then
            echo "❌ ENV_FILE_CONTENT is empty!"
          else
            echo "✅ ENV_FILE_CONTENT is loaded (hidden)"
          fi

          # Pastikan host & user tidak kosong
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "❌ VPS_HOST is empty!"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_USER }}" ]; then
            echo "❌ VPS_USER is empty!"
            exit 1
          fi
          echo "✅ All essential secrets loaded successfully!"
          echo "------------------------------------"

      # 4️⃣ Build Go binary
      - name: Build Go binary
        run: |
          echo "🏗️ Building Go app..."
          go mod tidy
          go build -o app cmd/main.go
          ls -lh app

      # 5️⃣ Deploy ke VPS (buat direktori & stop container lama)
      - name: Prepare VPS via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Preparing VPS environment..."
            mkdir -p ~/app
            cd ~/app
            podman stop ${{ secrets.APP_NAME || 'api-server' }} || true
            podman rm ${{ secrets.APP_NAME || 'api-server' }} || true

      # 6️⃣ Upload binary ke VPS
      - name: Upload binary
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./app"
          target: "~/app/app"

      # 7️⃣ Jalankan container baru di VPS
      - name: Run Podman container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Running Go app in Podman..."

            cd ~/app

            # Buat .env dari secret
            if [ ! -z "${{ secrets.ENV_FILE_CONTENT }}" ]; then
              echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
            fi

            # Buat Dockerfile
            cat > Dockerfile <<'EOF'
            FROM golang:1.24
            WORKDIR /app
            COPY app .
            COPY .env .env
            ENV TZ=${{ secrets.TZ || 'Asia/Jakarta' }}
            EXPOSE ${{ secrets.APP_PORT || '7777' }}
            CMD ["./app"]
            EOF

            podman build -t ${{ secrets.APP_NAME || 'api-server' }}:latest .
            podman run -d --name ${{ secrets.APP_NAME || 'api-server' }} \
            -p ${{ secrets.APP_PORT || '7777' }}:${{ secrets.APP_PORT || '7777' }} \
            -e APP_MODE=${{ secrets.APP_MODE }} \
            -e CONTEXT_TIMEOUT=${{ secrets.CONTEXT_TIMEOUT }} \
            -e JWT_ACCESS_TOKEN_EXPIRY_HOUR=${{ secrets.JWT_ACCESS_TOKEN_EXPIRY_HOUR }} \
            -e JWT_REFRESH_TOKEN_EXPIRY_HOUR=${{ secrets.JWT_REFRESH_TOKEN_EXPIRY_HOUR }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e PG_USERNAME=${{ secrets.PG_USERNAME }} \
            -e PG_PASSWORD=${{ secrets.PG_PASSWORD }} \
            -e PG_POOLMAX=${{ secrets.PG_POOLMAX }} \
            -e PG_PORT=${{ secrets.PG_PORT }} \
            -e PG_HOST=${{ secrets.PG_HOST }} \
            -e PG_NAME=${{ secrets.PG_NAME }} \
            -e PG_SSL=${{ secrets.PG_SSL }} \
            -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
            -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
            -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            -e REDIS_TIMEOUT=${{ secrets.REDIS_TIMEOUT }} \
            -e RABBITMQ_USER=${{ secrets.RABBITMQ_USER }} \
            -e RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
            -e RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
            -e RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }} \
            -e TYPESENSE_HOST=${{ secrets.TYPESENSE_HOST }} \
            -e TYPESENSE_PORT=${{ secrets.TYPESENSE_PORT }} \
            -e TYPESENSE_API_KEY=${{ secrets.TYPESENSE_API_KEY }} \
            -e MEILI_IMAGE_HOST=${{ secrets.MEILI_IMAGE_HOST }} \
            ${{ secrets.APP_NAME || 'api-server' }}:latest
      

            echo "✅ App is running on port ${{ secrets.APP_PORT || '7777' }}"
