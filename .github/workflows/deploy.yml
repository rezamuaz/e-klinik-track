name: Build & Deploy Go App to AlmaLinux VPS (Podman)

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: deploy

    steps:
      # 1️⃣ Checkout source code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION || '1.24' }}

      # 3️⃣ Decide target VPS based on branch
      - name: Set deployment target based on branch
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "Deploying to Production Server"
            echo "VPS_HOST=${{ secrets.VPS_HOST }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.VPS_USER }}" >> $GITHUB_ENV
            echo "APP_NAME=${{ secrets.APP_NAME }}" >> $GITHUB_ENV
            echo "APP_PORT=${{ secrets.APP_PORT }}" >> $GITHUB_ENV
            echo "${{ secrets.ENV_FILE_CONTENT }}" > env_file_content
          elif [[ "$BRANCH" == "dev" ]]; then
            echo "Deploying to Development Server"
            echo "VPS_HOST=${{ secrets.VPS_HOST_B }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.VPS_USER_B }}" >> $GITHUB_ENV
            echo "APP_NAME=${{ secrets.APP_NAME_B }}" >> $GITHUB_ENV
            echo "APP_PORT=${{ secrets.APP_PORT_B }}" >> $GITHUB_ENV
            echo "${{ secrets.ENV_FILE_CONTENT_B }}" > env_file_content
          else
            echo "🚫 No deploy target for this branch."
            exit 1
          fi

      # 4️⃣ Debug essential variables (optional)
      - name: Debug Info
        run: |
          echo "Branch: ${GITHUB_REF##*/}"
          echo "VPS_HOST: $VPS_HOST"
          echo "VPS_USER: $VPS_USER"
          echo "APP_NAME: $APP_NAME"
          echo "APP_PORT: $APP_PORT"

      # 5️⃣ Build Go binary
      - name: Build Go binary
        run: |
          echo "🏗️ Building Go app..."
          go mod tidy
          go build -o app cmd/main.go
          ls -lh app

      # 6️⃣ Prepare directory and stop old container in VPS
      - name: Prepare VPS via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Preparing VPS environment..."
            mkdir -p ~/app
            cd ~/app
            podman stop ${{ env.APP_NAME }} || true
            podman rm ${{ env.APP_NAME }} || true

      # 7️⃣ Upload binary to VPS
      - name: Upload binary
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./app"
          target: "~/app/app"

      # Upload .env file
      - name: Upload .env file
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "env_file_content"
          target: "~/app/.env"

      # 8️⃣ Deploy Go app with Podman
      - name: Run Podman container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/app

            # Create Dockerfile
            cat > Dockerfile <<EOF
            FROM golang:${{ secrets.GO_VERSION || '1.24' }}
            WORKDIR /app
            COPY app .
            COPY .env .env
            ENV TZ=${{ secrets.TZ || 'Asia/Jakarta' }}
            EXPOSE ${{ env.APP_PORT }}
            CMD ["./app"]
            EOF

            podman build -t ${{ env.APP_NAME }}:latest .
            podman run -d --name ${{ env.APP_NAME }} \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              --network e-klinik-track_e-klinik \
              --env-file /home/${{ env.VPS_USER }}/app/.env \
              ${{ env.APP_NAME }}:latest

            echo "✅ ${{ env.APP_NAME }} is running on port ${{ env.APP_PORT }}"
