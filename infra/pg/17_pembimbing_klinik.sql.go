// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 17_pembimbing_klinik.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
)

const createPembimbingKlinik = `-- name: CreatePembimbingKlinik :one
INSERT INTO pembimbing_klinik (
    fasilitas_id, user_id, is_active, created_by
) VALUES ($1, $2, $3, $4)
RETURNING id, fasilitas_id, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreatePembimbingKlinikParams struct {
	FasilitasID *uuid.UUID `json:"fasilitas_id"`
	UserID      *uuid.UUID `json:"user_id"`
	IsActive    bool       `json:"is_active"`
	CreatedBy   *string    `json:"created_by"`
}

func (q *Queries) CreatePembimbingKlinik(ctx context.Context, arg CreatePembimbingKlinikParams) (PembimbingKlinik, error) {
	row := q.db.QueryRow(ctx, createPembimbingKlinik,
		arg.FasilitasID,
		arg.UserID,
		arg.IsActive,
		arg.CreatedBy,
	)
	var i PembimbingKlinik
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deletePembimbingKlinik = `-- name: DeletePembimbingKlinik :exec
DELETE FROM pembimbing_klinik
WHERE id = $1
`

func (q *Queries) DeletePembimbingKlinik(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePembimbingKlinik, id)
	return err
}

const getAllPembimbingKlinik = `-- name: GetAllPembimbingKlinik :many
SELECT id, fasilitas_id, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM pembimbing_klinik
ORDER BY created_at DESC
`

func (q *Queries) GetAllPembimbingKlinik(ctx context.Context) ([]PembimbingKlinik, error) {
	rows, err := q.db.Query(ctx, getAllPembimbingKlinik)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PembimbingKlinik{}
	for rows.Next() {
		var i PembimbingKlinik
		if err := rows.Scan(
			&i.ID,
			&i.FasilitasID,
			&i.UserID,
			&i.IsActive,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedNote,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPembimbingKlinikByID = `-- name: GetPembimbingKlinikByID :one
SELECT id, fasilitas_id, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM pembimbing_klinik
WHERE id = $1
`

func (q *Queries) GetPembimbingKlinikByID(ctx context.Context, id uuid.UUID) (PembimbingKlinik, error) {
	row := q.db.QueryRow(ctx, getPembimbingKlinikByID, id)
	var i PembimbingKlinik
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const updatePembimbingKlinik = `-- name: UpdatePembimbingKlinik :one
UPDATE pembimbing_klinik
SET fasilitas_id = $2,
    user_id = $3,
    is_active = $4,
    updated_note = $5,
    updated_by = $6,
    updated_at = now()
WHERE id = $1
RETURNING id, fasilitas_id, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdatePembimbingKlinikParams struct {
	ID          uuid.UUID  `json:"id"`
	FasilitasID *uuid.UUID `json:"fasilitas_id"`
	UserID      *uuid.UUID `json:"user_id"`
	IsActive    bool       `json:"is_active"`
	UpdatedNote *string    `json:"updated_note"`
	UpdatedBy   *string    `json:"updated_by"`
}

func (q *Queries) UpdatePembimbingKlinik(ctx context.Context, arg UpdatePembimbingKlinikParams) (PembimbingKlinik, error) {
	row := q.db.QueryRow(ctx, updatePembimbingKlinik,
		arg.ID,
		arg.FasilitasID,
		arg.UserID,
		arg.IsActive,
		arg.UpdatedNote,
		arg.UpdatedBy,
	)
	var i PembimbingKlinik
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
