// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 07_kehadiran.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkKehadiran = `-- name: CheckKehadiran :one
SELECT id,created_at
FROM kehadiran
WHERE tgl_kehadiran = (
    CURRENT_DATE AT TIME ZONE 'Asia/Jakarta'
)
AND user_id = $1
AND is_active = TRUE
`

type CheckKehadiranRow struct {
	ID        uuid.UUID          `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CheckKehadiran(ctx context.Context, userID uuid.UUID) (CheckKehadiranRow, error) {
	row := q.db.QueryRow(ctx, checkKehadiran, userID)
	var i CheckKehadiranRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const countKehadiran = `-- name: CountKehadiran :one
SELECT COUNT(*)::bigint
FROM kehadiran
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR jadwal_dinas ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR fasilitas_id = $3::uuid)
  AND ($4::uuid IS NULL OR kontrak_id = $4::uuid)
  AND ($5::uuid IS NULL OR pembimbing_id = $5::uuid)
`

type CountKehadiranParams struct {
	JadwalDinas  *string    `json:"jadwal_dinas"`
	IsActive     *bool      `json:"is_active"`
	FasilitasID  *uuid.UUID `json:"fasilitas_id"`
	KontrakID    *uuid.UUID `json:"kontrak_id"`
	PembimbingID *uuid.UUID `json:"pembimbing_id"`
}

func (q *Queries) CountKehadiran(ctx context.Context, arg CountKehadiranParams) (int64, error) {
	row := q.db.QueryRow(ctx, countKehadiran,
		arg.JadwalDinas,
		arg.IsActive,
		arg.FasilitasID,
		arg.KontrakID,
		arg.PembimbingID,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createKehadiran = `-- name: CreateKehadiran :one
INSERT INTO kehadiran (
  fasilitas_id, kontrak_id, ruangan_id, pembimbing_id,user_id,pembimbing_klinik,mata_kuliah_id,
  jadwal_dinas, created_by, tgl_kehadiran, presensi
) VALUES (
  $1, $2, $3, $4,
  $5,$6, $7,$8,$9,$10,$11
)
ON CONFLICT (user_id, tgl_kehadiran) DO NOTHING
RETURNING id, fasilitas_id, kontrak_id, ruangan_id, mata_kuliah_id, pembimbing_id, pembimbing_klinik, jadwal_dinas, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, tgl_kehadiran, presensi, status, created_by, created_at
`

type CreateKehadiranParams struct {
	FasilitasID      uuid.UUID   `json:"fasilitas_id"`
	KontrakID        uuid.UUID   `json:"kontrak_id"`
	RuanganID        uuid.UUID   `json:"ruangan_id"`
	PembimbingID     uuid.UUID   `json:"pembimbing_id"`
	UserID           uuid.UUID   `json:"user_id"`
	PembimbingKlinik uuid.UUID   `json:"pembimbing_klinik"`
	MataKuliahID     uuid.UUID   `json:"mata_kuliah_id"`
	JadwalDinas      *string     `json:"jadwal_dinas"`
	CreatedBy        *string     `json:"created_by"`
	TglKehadiran     pgtype.Date `json:"tgl_kehadiran"`
	Presensi         string      `json:"presensi"`
}

func (q *Queries) CreateKehadiran(ctx context.Context, arg CreateKehadiranParams) (Kehadiran, error) {
	row := q.db.QueryRow(ctx, createKehadiran,
		arg.FasilitasID,
		arg.KontrakID,
		arg.RuanganID,
		arg.PembimbingID,
		arg.UserID,
		arg.PembimbingKlinik,
		arg.MataKuliahID,
		arg.JadwalDinas,
		arg.CreatedBy,
		arg.TglKehadiran,
		arg.Presensi,
	)
	var i Kehadiran
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.RuanganID,
		&i.MataKuliahID,
		&i.PembimbingID,
		&i.PembimbingKlinik,
		&i.JadwalDinas,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.TglKehadiran,
		&i.Presensi,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteKehadiran = `-- name: DeleteKehadiran :exec
UPDATE kehadiran
SET deleted_at = now(), deleted_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type DeleteKehadiranParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteKehadiran(ctx context.Context, arg DeleteKehadiranParams) error {
	_, err := q.db.Exec(ctx, deleteKehadiran, arg.ID, arg.DeletedBy)
	return err
}

const getKehadiran = `-- name: GetKehadiran :one
SELECT id, fasilitas_id, kontrak_id, ruangan_id, mata_kuliah_id, pembimbing_id, pembimbing_klinik, jadwal_dinas, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, tgl_kehadiran, presensi, status, created_by, created_at FROM kehadiran
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetKehadiran(ctx context.Context, id uuid.UUID) (Kehadiran, error) {
	row := q.db.QueryRow(ctx, getKehadiran, id)
	var i Kehadiran
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.RuanganID,
		&i.MataKuliahID,
		&i.PembimbingID,
		&i.PembimbingKlinik,
		&i.JadwalDinas,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.TglKehadiran,
		&i.Presensi,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getKehadiranByPembimbingUserId = `-- name: GetKehadiranByPembimbingUserId :many
SELECT
    k.id,
    u.id AS user_id,
    u.nama,
    k.tgl_kehadiran
FROM kehadiran k
JOIN users u ON u.id = k.user_id
WHERE k.is_active = true
  AND ($1::uuid IS NULL OR k.pembimbing_klinik = $1::uuid)
  AND ($2::uuid IS NULL OR k.user_id = $2::uuid)
  AND k.status IS NULL
  AND k.presensi = 'hadir'
ORDER BY k.tgl_kehadiran DESC
`

type GetKehadiranByPembimbingUserIdParams struct {
	PembimbingKlinik *uuid.UUID `json:"pembimbing_klinik"`
	UserID           *uuid.UUID `json:"user_id"`
}

type GetKehadiranByPembimbingUserIdRow struct {
	ID           uuid.UUID   `json:"id"`
	UserID       uuid.UUID   `json:"user_id"`
	Nama         string      `json:"nama"`
	TglKehadiran pgtype.Date `json:"tgl_kehadiran"`
}

func (q *Queries) GetKehadiranByPembimbingUserId(ctx context.Context, arg GetKehadiranByPembimbingUserIdParams) ([]GetKehadiranByPembimbingUserIdRow, error) {
	rows, err := q.db.Query(ctx, getKehadiranByPembimbingUserId, arg.PembimbingKlinik, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetKehadiranByPembimbingUserIdRow{}
	for rows.Next() {
		var i GetKehadiranByPembimbingUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Nama,
			&i.TglKehadiran,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMahasiswaTidakHadir = `-- name: GetMahasiswaTidakHadir :many
SELECT
  k.user_id,
  u.nama AS nama_mahasiswa,
  r.nama_ruangan,
  p.nama AS nama_pembimbing,
  k.presensi,
  k.status
FROM kehadiran k
JOIN users u ON u.id = k.user_id
JOIN ruangan r ON r.id = k.ruangan_id
LEFT JOIN users p ON p.id = k.pembimbing_id
WHERE k.tgl_kehadiran = $1
  AND k.fasilitas_id = $2
  AND k.presensi IN ('izin', 'sakit')
  AND k.is_active = TRUE
ORDER BY r.nama_ruangan, u.nama
`

type GetMahasiswaTidakHadirParams struct {
	TglKehadiran pgtype.Date `json:"tgl_kehadiran"`
	FasilitasID  uuid.UUID   `json:"fasilitas_id"`
}

type GetMahasiswaTidakHadirRow struct {
	UserID         uuid.UUID `json:"user_id"`
	NamaMahasiswa  string    `json:"nama_mahasiswa"`
	NamaRuangan    string    `json:"nama_ruangan"`
	NamaPembimbing *string   `json:"nama_pembimbing"`
	Presensi       string    `json:"presensi"`
	Status         *string   `json:"status"`
}

func (q *Queries) GetMahasiswaTidakHadir(ctx context.Context, arg GetMahasiswaTidakHadirParams) ([]GetMahasiswaTidakHadirRow, error) {
	rows, err := q.db.Query(ctx, getMahasiswaTidakHadir, arg.TglKehadiran, arg.FasilitasID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMahasiswaTidakHadirRow{}
	for rows.Next() {
		var i GetMahasiswaTidakHadirRow
		if err := rows.Scan(
			&i.UserID,
			&i.NamaMahasiswa,
			&i.NamaRuangan,
			&i.NamaPembimbing,
			&i.Presensi,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRekapDetailFasilitasHarian = `-- name: GetRekapDetailFasilitasHarian :many
SELECT
  r.id AS ruangan_id,
  r.nama_ruangan,
  COUNT(DISTINCT k.user_id) AS total_mahasiswa,
  COUNT(*) FILTER (WHERE k.presensi = 'hadir') AS hadir,
  COUNT(*) FILTER (WHERE k.presensi = 'izin') AS izin,
  COUNT(*) FILTER (WHERE k.presensi = 'sakit') AS sakit,
  COUNT(*) FILTER (WHERE k.presensi = 'alpa') AS alpa,
  ROUND(
    (COUNT(*) FILTER (WHERE k.presensi = 'hadir')::numeric / NULLIF(COUNT(*), 0)) * 100,
    2
  ) AS persentase_hadir
FROM kehadiran k
JOIN ruangan r ON r.id = k.ruangan_id
WHERE k.tgl_kehadiran = $1
  AND k.fasilitas_id = $2
  AND k.is_active = TRUE
GROUP BY r.id, r.nama_ruangan
ORDER BY r.nama_ruangan
`

type GetRekapDetailFasilitasHarianParams struct {
	TglKehadiran pgtype.Date `json:"tgl_kehadiran"`
	FasilitasID  uuid.UUID   `json:"fasilitas_id"`
}

type GetRekapDetailFasilitasHarianRow struct {
	RuanganID       uuid.UUID      `json:"ruangan_id"`
	NamaRuangan     string         `json:"nama_ruangan"`
	TotalMahasiswa  int64          `json:"total_mahasiswa"`
	Hadir           int64          `json:"hadir"`
	Izin            int64          `json:"izin"`
	Sakit           int64          `json:"sakit"`
	Alpa            int64          `json:"alpa"`
	PersentaseHadir pgtype.Numeric `json:"persentase_hadir"`
}

func (q *Queries) GetRekapDetailFasilitasHarian(ctx context.Context, arg GetRekapDetailFasilitasHarianParams) ([]GetRekapDetailFasilitasHarianRow, error) {
	rows, err := q.db.Query(ctx, getRekapDetailFasilitasHarian, arg.TglKehadiran, arg.FasilitasID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRekapDetailFasilitasHarianRow{}
	for rows.Next() {
		var i GetRekapDetailFasilitasHarianRow
		if err := rows.Scan(
			&i.RuanganID,
			&i.NamaRuangan,
			&i.TotalMahasiswa,
			&i.Hadir,
			&i.Izin,
			&i.Sakit,
			&i.Alpa,
			&i.PersentaseHadir,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRekapGlobalHarian = `-- name: GetRekapGlobalHarian :one

WITH
TotalData AS (
  SELECT
    COUNT(DISTINCT k.user_id) AS total_mahasiswa_unik,
    COUNT(*) FILTER (WHERE k.presensi = 'hadir') AS hadir,
    COUNT(*) FILTER (WHERE k.presensi = 'izin') AS izin,
    COUNT(*) FILTER (WHERE k.presensi = 'sakit') AS sakit
  FROM kehadiran k
  WHERE k.tgl_kehadiran = $1
    AND k.is_active = TRUE
),

YesterdayData AS (
  SELECT
    COUNT(DISTINCT k.user_id) AS total_mahasiswa_unik,
    COUNT(*) FILTER (WHERE k.presensi = 'hadir') AS hadir,
    COUNT(*) FILTER (WHERE k.presensi = 'izin') AS izin,
    COUNT(*) FILTER (WHERE k.presensi = 'sakit') AS sakit
  FROM kehadiran k
  WHERE k.tgl_kehadiran = ($1 - INTERVAL '1 day')
    AND k.is_active = TRUE
)

SELECT
  $1::date AS tanggal,
  COALESCE(td.total_mahasiswa_unik, 0) AS total_mahasiswa,
  COALESCE(td.hadir, 0) AS hadir,
  COALESCE(td.izin, 0) AS izin,
  COALESCE(td.sakit, 0) AS sakit,

  -- Persentase hari ini
  ROUND((COALESCE(td.hadir, 0)::numeric / NULLIF(td.total_mahasiswa_unik, 0)) * 100, 2) AS persentase_hadir,
  ROUND((COALESCE(td.izin, 0)::numeric / NULLIF(td.total_mahasiswa_unik, 0)) * 100, 2) AS persentase_izin,
  ROUND((COALESCE(td.sakit, 0)::numeric / NULLIF(td.total_mahasiswa_unik, 0)) * 100, 2) AS persentase_sakit,

  -- Growth aman
  CASE
    WHEN COALESCE(yd.hadir, 0) = 0 AND COALESCE(td.hadir, 0) > 0
      THEN 100
    WHEN COALESCE(yd.hadir, 0) = 0 AND COALESCE(td.hadir, 0) = 0
      THEN 0
    ELSE ROUND(((td.hadir - yd.hadir)::numeric / yd.hadir) * 100, 2)
  END AS growth_hadir,

  CASE
    WHEN COALESCE(yd.izin, 0) = 0 AND COALESCE(td.izin, 0) > 0
      THEN 100
    WHEN COALESCE(yd.izin, 0) = 0 AND COALESCE(td.izin, 0) = 0
      THEN 0
    ELSE ROUND(((td.izin - yd.izin)::numeric / yd.izin) * 100, 2)
  END AS growth_izin,

  CASE
    WHEN COALESCE(yd.sakit, 0) = 0 AND COALESCE(td.sakit, 0) > 0
      THEN 100
    WHEN COALESCE(yd.sakit, 0) = 0 AND COALESCE(td.sakit, 0) = 0
      THEN 0
    ELSE ROUND(((td.sakit - yd.sakit)::numeric / yd.sakit) * 100, 2)
  END AS growth_sakit,

  CASE
    WHEN COALESCE(yd.total_mahasiswa_unik, 0) = 0 AND COALESCE(td.total_mahasiswa_unik, 0) > 0
      THEN 100
    WHEN COALESCE(yd.total_mahasiswa_unik, 0) = 0 AND COALESCE(td.total_mahasiswa_unik, 0) = 0
      THEN 0
    ELSE ROUND(((td.total_mahasiswa_unik - yd.total_mahasiswa_unik)::numeric / yd.total_mahasiswa_unik) * 100, 2)
  END AS growth_total_mahasiswa

FROM TotalData td
LEFT JOIN YesterdayData yd ON TRUE
`

type GetRekapGlobalHarianRow struct {
	Tanggal              pgtype.Date    `json:"tanggal"`
	TotalMahasiswa       int64          `json:"total_mahasiswa"`
	Hadir                int64          `json:"hadir"`
	Izin                 int64          `json:"izin"`
	Sakit                int64          `json:"sakit"`
	PersentaseHadir      pgtype.Numeric `json:"persentase_hadir"`
	PersentaseIzin       pgtype.Numeric `json:"persentase_izin"`
	PersentaseSakit      pgtype.Numeric `json:"persentase_sakit"`
	GrowthHadir          interface{}    `json:"growth_hadir"`
	GrowthIzin           interface{}    `json:"growth_izin"`
	GrowthSakit          interface{}    `json:"growth_sakit"`
	GrowthTotalMahasiswa interface{}    `json:"growth_total_mahasiswa"`
}

// ////////////////////////////////////////////////////////////////
// Data hari ini
// Data kemarin
func (q *Queries) GetRekapGlobalHarian(ctx context.Context, tgl pgtype.Date) (GetRekapGlobalHarianRow, error) {
	row := q.db.QueryRow(ctx, getRekapGlobalHarian, tgl)
	var i GetRekapGlobalHarianRow
	err := row.Scan(
		&i.Tanggal,
		&i.TotalMahasiswa,
		&i.Hadir,
		&i.Izin,
		&i.Sakit,
		&i.PersentaseHadir,
		&i.PersentaseIzin,
		&i.PersentaseSakit,
		&i.GrowthHadir,
		&i.GrowthIzin,
		&i.GrowthSakit,
		&i.GrowthTotalMahasiswa,
	)
	return i, err
}

const getRekapKehadiranPerFasilitasHarian = `-- name: GetRekapKehadiranPerFasilitasHarian :many
SELECT
  f.id AS fasilitas_id,
  f.nama AS nama_fasilitas,
  COUNT(DISTINCT k.user_id) AS total_mahasiswa,
  COUNT(*) FILTER (WHERE k.presensi = 'hadir') AS hadir,
  COUNT(*) FILTER (WHERE k.presensi = 'izin') AS izin,
  COUNT(*) FILTER (WHERE k.presensi = 'sakit') AS sakit,
  -- COUNT(*) FILTER (WHERE k.presensi = 'alpa') AS alpa,
  ROUND(
    (COUNT(*) FILTER (WHERE k.presensi = 'hadir')::numeric / NULLIF(COUNT(*), 0)) * 100,
    2
  ) AS persentase_hadir
FROM kehadiran k
JOIN fasilitas_kesehatan f ON f.id = k.fasilitas_id
WHERE k.tgl_kehadiran = $1
  AND k.is_active = TRUE
GROUP BY f.id, f.nama
ORDER BY f.nama
`

type GetRekapKehadiranPerFasilitasHarianRow struct {
	FasilitasID     uuid.UUID      `json:"fasilitas_id"`
	NamaFasilitas   string         `json:"nama_fasilitas"`
	TotalMahasiswa  int64          `json:"total_mahasiswa"`
	Hadir           int64          `json:"hadir"`
	Izin            int64          `json:"izin"`
	Sakit           int64          `json:"sakit"`
	PersentaseHadir pgtype.Numeric `json:"persentase_hadir"`
}

func (q *Queries) GetRekapKehadiranPerFasilitasHarian(ctx context.Context, tglKehadiran pgtype.Date) ([]GetRekapKehadiranPerFasilitasHarianRow, error) {
	rows, err := q.db.Query(ctx, getRekapKehadiranPerFasilitasHarian, tglKehadiran)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRekapKehadiranPerFasilitasHarianRow{}
	for rows.Next() {
		var i GetRekapKehadiranPerFasilitasHarianRow
		if err := rows.Scan(
			&i.FasilitasID,
			&i.NamaFasilitas,
			&i.TotalMahasiswa,
			&i.Hadir,
			&i.Izin,
			&i.Sakit,
			&i.PersentaseHadir,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRekapPembimbingFasilitasHarian = `-- name: GetRekapPembimbingFasilitasHarian :many
SELECT
  u.id AS pembimbing_id,
  u.nama AS nama_pembimbing,
  COUNT(DISTINCT k.user_id) AS total_mahasiswa,
  COUNT(*) FILTER (WHERE k.presensi = 'hadir') AS hadir,
  ROUND(
    (COUNT(*) FILTER (WHERE k.presensi = 'hadir')::numeric / NULLIF(COUNT(*), 0)) * 100,
    2
  ) AS persentase_hadir
FROM kehadiran k
JOIN users u ON u.id = k.pembimbing_id
WHERE k.tgl_kehadiran = $1
  AND k.fasilitas_id = $2
  AND k.is_active = TRUE
GROUP BY u.id, u.nama
ORDER BY u.nama
`

type GetRekapPembimbingFasilitasHarianParams struct {
	TglKehadiran pgtype.Date `json:"tgl_kehadiran"`
	FasilitasID  uuid.UUID   `json:"fasilitas_id"`
}

type GetRekapPembimbingFasilitasHarianRow struct {
	PembimbingID    uuid.UUID      `json:"pembimbing_id"`
	NamaPembimbing  string         `json:"nama_pembimbing"`
	TotalMahasiswa  int64          `json:"total_mahasiswa"`
	Hadir           int64          `json:"hadir"`
	PersentaseHadir pgtype.Numeric `json:"persentase_hadir"`
}

func (q *Queries) GetRekapPembimbingFasilitasHarian(ctx context.Context, arg GetRekapPembimbingFasilitasHarianParams) ([]GetRekapPembimbingFasilitasHarianRow, error) {
	rows, err := q.db.Query(ctx, getRekapPembimbingFasilitasHarian, arg.TglKehadiran, arg.FasilitasID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRekapPembimbingFasilitasHarianRow{}
	for rows.Next() {
		var i GetRekapPembimbingFasilitasHarianRow
		if err := rows.Scan(
			&i.PembimbingID,
			&i.NamaPembimbing,
			&i.TotalMahasiswa,
			&i.Hadir,
			&i.PersentaseHadir,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrenKehadiran7Hari = `-- name: GetTrenKehadiran7Hari :many
SELECT
  f.id AS fasilitas_id,
  f.nama AS nama_fasilitas,
  k.tgl_kehadiran AS tanggal,
  COUNT(DISTINCT k.user_id) AS total_mahasiswa,
  COUNT(*) FILTER (WHERE k.presensi = 'hadir') AS hadir,
  COUNT(*) FILTER (WHERE k.presensi = 'izin') AS izin,
  COUNT(*) FILTER (WHERE k.presensi = 'sakit') AS sakit,
  COUNT(*) FILTER (WHERE k.presensi = 'alpa') AS alpa,
  ROUND(
    (COUNT(*) FILTER (WHERE k.presensi = 'hadir')::numeric / NULLIF(COUNT(*), 0)) * 100,
    2
  ) AS persentase_hadir
FROM kehadiran k
JOIN fasilitas_kesehatan f ON f.id = k.fasilitas_id
WHERE k.tgl_kehadiran BETWEEN (CURRENT_DATE - INTERVAL '6 days') AND CURRENT_DATE
  AND k.is_active = TRUE
GROUP BY f.id, f.nama, k.tgl_kehadiran
ORDER BY f.nama, k.tgl_kehadiran
`

type GetTrenKehadiran7HariRow struct {
	FasilitasID     uuid.UUID      `json:"fasilitas_id"`
	NamaFasilitas   string         `json:"nama_fasilitas"`
	Tanggal         pgtype.Date    `json:"tanggal"`
	TotalMahasiswa  int64          `json:"total_mahasiswa"`
	Hadir           int64          `json:"hadir"`
	Izin            int64          `json:"izin"`
	Sakit           int64          `json:"sakit"`
	Alpa            int64          `json:"alpa"`
	PersentaseHadir pgtype.Numeric `json:"persentase_hadir"`
}

func (q *Queries) GetTrenKehadiran7Hari(ctx context.Context) ([]GetTrenKehadiran7HariRow, error) {
	rows, err := q.db.Query(ctx, getTrenKehadiran7Hari)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTrenKehadiran7HariRow{}
	for rows.Next() {
		var i GetTrenKehadiran7HariRow
		if err := rows.Scan(
			&i.FasilitasID,
			&i.NamaFasilitas,
			&i.Tanggal,
			&i.TotalMahasiswa,
			&i.Hadir,
			&i.Izin,
			&i.Sakit,
			&i.Alpa,
			&i.PersentaseHadir,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKehadiran = `-- name: ListKehadiran :many
SELECT
  id,
  fasilitas_id,
  kontrak_id,
  ruangan_id,
  pembimbing_id,
  jadwal_dinas,
  is_active,
  created_by,
  created_at
FROM kehadiran
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR jadwal_dinas ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR fasilitas_id = $3::uuid)
  AND ($4::uuid IS NULL OR user_id = $4::uuid)
  AND ($5::uuid IS NULL OR kontrak_id = $5::uuid)
  AND ($6::uuid IS NULL OR pembimbing_id = $6::uuid)
ORDER BY
  CASE WHEN $7::text = 'jadwal_dinas' AND $8::text = 'asc'  THEN jadwal_dinas END ASC,
  CASE WHEN $7::text = 'jadwal_dinas' AND $8::text = 'desc' THEN jadwal_dinas END DESC,
  CASE WHEN $7::text = 'created_at' AND $8::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $7::text = 'created_at' AND $8::text = 'desc' THEN created_at END DESC
LIMIT $10
OFFSET $9
`

type ListKehadiranParams struct {
	JadwalDinas  *string    `json:"jadwal_dinas"`
	IsActive     *bool      `json:"is_active"`
	FasilitasID  *uuid.UUID `json:"fasilitas_id"`
	UserID       *uuid.UUID `json:"user_id"`
	KontrakID    *uuid.UUID `json:"kontrak_id"`
	PembimbingID *uuid.UUID `json:"pembimbing_id"`
	OrderBy      *string    `json:"order_by"`
	Sort         *string    `json:"sort"`
	Offset       int32      `json:"offset"`
	Limit        int32      `json:"limit"`
}

type ListKehadiranRow struct {
	ID           uuid.UUID          `json:"id"`
	FasilitasID  uuid.UUID          `json:"fasilitas_id"`
	KontrakID    uuid.UUID          `json:"kontrak_id"`
	RuanganID    uuid.UUID          `json:"ruangan_id"`
	PembimbingID uuid.UUID          `json:"pembimbing_id"`
	JadwalDinas  *string            `json:"jadwal_dinas"`
	IsActive     bool               `json:"is_active"`
	CreatedBy    *string            `json:"created_by"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListKehadiran(ctx context.Context, arg ListKehadiranParams) ([]ListKehadiranRow, error) {
	rows, err := q.db.Query(ctx, listKehadiran,
		arg.JadwalDinas,
		arg.IsActive,
		arg.FasilitasID,
		arg.UserID,
		arg.KontrakID,
		arg.PembimbingID,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListKehadiranRow{}
	for rows.Next() {
		var i ListKehadiranRow
		if err := rows.Scan(
			&i.ID,
			&i.FasilitasID,
			&i.KontrakID,
			&i.RuanganID,
			&i.PembimbingID,
			&i.JadwalDinas,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rekapKehadiranMahasiswa = `-- name: RekapKehadiranMahasiswa :one
SELECT
    user_id,
    COUNT(*) FILTER (WHERE presensi = 'hadir') AS total_hadir,
    COUNT(*) FILTER (WHERE presensi = 'izin') AS total_izin,
    COUNT(*) FILTER (WHERE presensi = 'sakit') AS total_sakit,
    COUNT(*) AS total_semua
FROM kehadiran
WHERE is_active = true
  AND user_id = $1
  AND tgl_kehadiran BETWEEN $2 AND $3
GROUP BY user_id
`

type RekapKehadiranMahasiswaParams struct {
	UserID   uuid.UUID   `json:"user_id"`
	TglAwal  pgtype.Date `json:"tgl_awal"`
	TglAkhir pgtype.Date `json:"tgl_akhir"`
}

type RekapKehadiranMahasiswaRow struct {
	UserID     uuid.UUID `json:"user_id"`
	TotalHadir int64     `json:"total_hadir"`
	TotalIzin  int64     `json:"total_izin"`
	TotalSakit int64     `json:"total_sakit"`
	TotalSemua int64     `json:"total_semua"`
}

func (q *Queries) RekapKehadiranMahasiswa(ctx context.Context, arg RekapKehadiranMahasiswaParams) (RekapKehadiranMahasiswaRow, error) {
	row := q.db.QueryRow(ctx, rekapKehadiranMahasiswa, arg.UserID, arg.TglAwal, arg.TglAkhir)
	var i RekapKehadiranMahasiswaRow
	err := row.Scan(
		&i.UserID,
		&i.TotalHadir,
		&i.TotalIzin,
		&i.TotalSakit,
		&i.TotalSemua,
	)
	return i, err
}

const rekapKehadiranMahasiswaDetail = `-- name: RekapKehadiranMahasiswaDetail :many
SELECT
    tgl_kehadiran,
    COUNT(*) FILTER (WHERE presensi = 'hadir') AS total_hadir,
    COUNT(*) FILTER (WHERE presensi = 'izin') AS total_izin,
    COUNT(*) FILTER (WHERE presensi = 'sakit') AS total_sakit
FROM kehadiran
WHERE is_active = true
  AND user_id = $1
  AND tgl_kehadiran BETWEEN $2 AND $3
GROUP BY tgl_kehadiran
ORDER BY tgl_kehadiran
`

type RekapKehadiranMahasiswaDetailParams struct {
	UserID   uuid.UUID   `json:"user_id"`
	TglAwal  pgtype.Date `json:"tgl_awal"`
	TglAkhir pgtype.Date `json:"tgl_akhir"`
}

type RekapKehadiranMahasiswaDetailRow struct {
	TglKehadiran pgtype.Date `json:"tgl_kehadiran"`
	TotalHadir   int64       `json:"total_hadir"`
	TotalIzin    int64       `json:"total_izin"`
	TotalSakit   int64       `json:"total_sakit"`
}

func (q *Queries) RekapKehadiranMahasiswaDetail(ctx context.Context, arg RekapKehadiranMahasiswaDetailParams) ([]RekapKehadiranMahasiswaDetailRow, error) {
	rows, err := q.db.Query(ctx, rekapKehadiranMahasiswaDetail, arg.UserID, arg.TglAwal, arg.TglAkhir)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RekapKehadiranMahasiswaDetailRow{}
	for rows.Next() {
		var i RekapKehadiranMahasiswaDetailRow
		if err := rows.Scan(
			&i.TglKehadiran,
			&i.TotalHadir,
			&i.TotalIzin,
			&i.TotalSakit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKehadiranPartial = `-- name: UpdateKehadiranPartial :one
UPDATE kehadiran
SET
  fasilitas_id  = COALESCE($2, fasilitas_id),
  kontrak_id    = COALESCE($3, kontrak_id),
  ruangan_id    = COALESCE($4, ruangan_id),
  pembimbing_id = COALESCE($5, pembimbing_id),
  jadwal_dinas  = COALESCE($6, jadwal_dinas),
  is_active     = COALESCE($7, is_active),
  status        = COALESCE($8, status),
  updated_by    = COALESCE($9, updated_by),
  updated_note  = COALESCE($10, updated_note),
  updated_at    = now()
WHERE id = $1
RETURNING id, fasilitas_id, kontrak_id, ruangan_id, mata_kuliah_id, pembimbing_id, pembimbing_klinik, jadwal_dinas, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, tgl_kehadiran, presensi, status, created_by, created_at
`

type UpdateKehadiranPartialParams struct {
	ID           uuid.UUID  `json:"id"`
	FasilitasID  *uuid.UUID `json:"fasilitas_id"`
	KontrakID    *uuid.UUID `json:"kontrak_id"`
	RuanganID    *uuid.UUID `json:"ruangan_id"`
	PembimbingID *uuid.UUID `json:"pembimbing_id"`
	JadwalDinas  *string    `json:"jadwal_dinas"`
	IsActive     *bool      `json:"is_active"`
	Status       *string    `json:"status"`
	UpdatedBy    *string    `json:"updated_by"`
	UpdatedNote  *string    `json:"updated_note"`
}

func (q *Queries) UpdateKehadiranPartial(ctx context.Context, arg UpdateKehadiranPartialParams) (Kehadiran, error) {
	row := q.db.QueryRow(ctx, updateKehadiranPartial,
		arg.ID,
		arg.FasilitasID,
		arg.KontrakID,
		arg.RuanganID,
		arg.PembimbingID,
		arg.JadwalDinas,
		arg.IsActive,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedNote,
	)
	var i Kehadiran
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.RuanganID,
		&i.MataKuliahID,
		&i.PembimbingID,
		&i.PembimbingKlinik,
		&i.JadwalDinas,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.TglKehadiran,
		&i.Presensi,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
