// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 07_kehadiran.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const countKehadiran = `-- name: CountKehadiran :one
SELECT COUNT(*)::bigint
FROM kehadiran
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR jadwal_dinas ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR fasilitas_id = $3::uuid)
  AND ($4::uuid IS NULL OR kontrak_id = $4::uuid)
  AND ($5::uuid IS NULL OR pembimbing_id = $5::uuid)
`

type CountKehadiranParams struct {
	JadwalDinas  *string    `json:"jadwal_dinas"`
	IsActive     *bool      `json:"is_active"`
	FasilitasID  *uuid.UUID `json:"fasilitas_id"`
	KontrakID    *uuid.UUID `json:"kontrak_id"`
	PembimbingID *uuid.UUID `json:"pembimbing_id"`
}

func (q *Queries) CountKehadiran(ctx context.Context, arg CountKehadiranParams) (int64, error) {
	row := q.db.QueryRow(ctx, countKehadiran,
		arg.JadwalDinas,
		arg.IsActive,
		arg.FasilitasID,
		arg.KontrakID,
		arg.PembimbingID,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createKehadiran = `-- name: CreateKehadiran :one
INSERT INTO kehadiran (
  fasilitas_id, kontrak_id, ruangan_id, pembimbing_id,user_id,mata_kuliah_id,
  jadwal_dinas, created_by
) VALUES (
  $1, $2, $3, $4,
  $5,$6, $7,$8
)
RETURNING id, fasilitas_id, kontrak_id, ruangan_id, mata_kuliah_id, pembimbing_id, jadwal_dinas, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreateKehadiranParams struct {
	FasilitasID  uuid.UUID `json:"fasilitas_id"`
	KontrakID    uuid.UUID `json:"kontrak_id"`
	RuanganID    uuid.UUID `json:"ruangan_id"`
	PembimbingID uuid.UUID `json:"pembimbing_id"`
	UserID       uuid.UUID `json:"user_id"`
	MataKuliahID uuid.UUID `json:"mata_kuliah_id"`
	JadwalDinas  *string   `json:"jadwal_dinas"`
	CreatedBy    *string   `json:"created_by"`
}

func (q *Queries) CreateKehadiran(ctx context.Context, arg CreateKehadiranParams) (Kehadiran, error) {
	row := q.db.QueryRow(ctx, createKehadiran,
		arg.FasilitasID,
		arg.KontrakID,
		arg.RuanganID,
		arg.PembimbingID,
		arg.UserID,
		arg.MataKuliahID,
		arg.JadwalDinas,
		arg.CreatedBy,
	)
	var i Kehadiran
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.RuanganID,
		&i.MataKuliahID,
		&i.PembimbingID,
		&i.JadwalDinas,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteKehadiran = `-- name: DeleteKehadiran :exec
UPDATE kehadiran
SET deleted_at = now(), deleted_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type DeleteKehadiranParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteKehadiran(ctx context.Context, arg DeleteKehadiranParams) error {
	_, err := q.db.Exec(ctx, deleteKehadiran, arg.ID, arg.DeletedBy)
	return err
}

const getKehadiran = `-- name: GetKehadiran :one
SELECT id, fasilitas_id, kontrak_id, ruangan_id, mata_kuliah_id, pembimbing_id, jadwal_dinas, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM kehadiran
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetKehadiran(ctx context.Context, id uuid.UUID) (Kehadiran, error) {
	row := q.db.QueryRow(ctx, getKehadiran, id)
	var i Kehadiran
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.RuanganID,
		&i.MataKuliahID,
		&i.PembimbingID,
		&i.JadwalDinas,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listKehadiran = `-- name: ListKehadiran :many
SELECT
  id,
  fasilitas_id,
  kontrak_id,
  ruangan_id,
  pembimbing_id,
  jadwal_dinas,
  is_active,
  created_by,
  created_at
FROM kehadiran
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR jadwal_dinas ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR fasilitas_id = $3::uuid)
  AND ($4::uuid IS NULL OR user_id = $4::uuid)
  AND ($5::uuid IS NULL OR kontrak_id = $5::uuid)
  AND ($6::uuid IS NULL OR pembimbing_id = $6::uuid)
ORDER BY
  CASE WHEN $7::text = 'jadwal_dinas' AND $8::text = 'asc'  THEN jadwal_dinas END ASC,
  CASE WHEN $7::text = 'jadwal_dinas' AND $8::text = 'desc' THEN jadwal_dinas END DESC,
  CASE WHEN $7::text = 'created_at' AND $8::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $7::text = 'created_at' AND $8::text = 'desc' THEN created_at END DESC
LIMIT $10
OFFSET $9
`

type ListKehadiranParams struct {
	JadwalDinas  *string    `json:"jadwal_dinas"`
	IsActive     *bool      `json:"is_active"`
	FasilitasID  *uuid.UUID `json:"fasilitas_id"`
	UserID       *uuid.UUID `json:"user_id"`
	KontrakID    *uuid.UUID `json:"kontrak_id"`
	PembimbingID *uuid.UUID `json:"pembimbing_id"`
	OrderBy      *string    `json:"order_by"`
	Sort         *string    `json:"sort"`
	Offset       int32      `json:"offset"`
	Limit        int32      `json:"limit"`
}

type ListKehadiranRow struct {
	ID           uuid.UUID          `json:"id"`
	FasilitasID  uuid.UUID          `json:"fasilitas_id"`
	KontrakID    uuid.UUID          `json:"kontrak_id"`
	RuanganID    uuid.UUID          `json:"ruangan_id"`
	PembimbingID uuid.UUID          `json:"pembimbing_id"`
	JadwalDinas  *string            `json:"jadwal_dinas"`
	IsActive     bool               `json:"is_active"`
	CreatedBy    *string            `json:"created_by"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListKehadiran(ctx context.Context, arg ListKehadiranParams) ([]ListKehadiranRow, error) {
	rows, err := q.db.Query(ctx, listKehadiran,
		arg.JadwalDinas,
		arg.IsActive,
		arg.FasilitasID,
		arg.UserID,
		arg.KontrakID,
		arg.PembimbingID,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListKehadiranRow{}
	for rows.Next() {
		var i ListKehadiranRow
		if err := rows.Scan(
			&i.ID,
			&i.FasilitasID,
			&i.KontrakID,
			&i.RuanganID,
			&i.PembimbingID,
			&i.JadwalDinas,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKehadiranPartial = `-- name: UpdateKehadiranPartial :one
UPDATE kehadiran
SET
  fasilitas_id  = COALESCE($2, fasilitas_id),
  kontrak_id    = COALESCE($3, kontrak_id),
  ruangan_id    = COALESCE($4, ruangan_id),
  pembimbing_id = COALESCE($5, pembimbing_id),
  jadwal_dinas  = COALESCE($6, jadwal_dinas),
  is_active     = COALESCE($7, is_active),
  updated_by    = COALESCE($8, updated_by),
  updated_note  = COALESCE($9, updated_note),
  updated_at    = now()
WHERE id = $1
RETURNING id, fasilitas_id, kontrak_id, ruangan_id, mata_kuliah_id, pembimbing_id, jadwal_dinas, user_id, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateKehadiranPartialParams struct {
	ID           uuid.UUID  `json:"id"`
	FasilitasID  *uuid.UUID `json:"fasilitas_id"`
	KontrakID    *uuid.UUID `json:"kontrak_id"`
	RuanganID    *uuid.UUID `json:"ruangan_id"`
	PembimbingID *uuid.UUID `json:"pembimbing_id"`
	JadwalDinas  *string    `json:"jadwal_dinas"`
	IsActive     *bool      `json:"is_active"`
	UpdatedBy    *string    `json:"updated_by"`
	UpdatedNote  *string    `json:"updated_note"`
}

func (q *Queries) UpdateKehadiranPartial(ctx context.Context, arg UpdateKehadiranPartialParams) (Kehadiran, error) {
	row := q.db.QueryRow(ctx, updateKehadiranPartial,
		arg.ID,
		arg.FasilitasID,
		arg.KontrakID,
		arg.RuanganID,
		arg.PembimbingID,
		arg.JadwalDinas,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
	)
	var i Kehadiran
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.RuanganID,
		&i.MataKuliahID,
		&i.PembimbingID,
		&i.JadwalDinas,
		&i.UserID,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
