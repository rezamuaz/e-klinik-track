// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 16_r2_groups.sql

package pg

import (
	"context"
)

const createR2Group = `-- name: CreateR2Group :one
INSERT INTO r2_groups (
  name, description, created_by
) VALUES (
  $1, $2, $3
)
RETURNING id, name, description, is_active, deleted_by, deleted_at, updated_by, updated_at, created_by, created_at
`

type CreateR2GroupParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	CreatedBy   *string `json:"created_by"`
}

func (q *Queries) CreateR2Group(ctx context.Context, arg CreateR2GroupParams) (R2Group, error) {
	row := q.db.QueryRow(ctx, createR2Group, arg.Name, arg.Description, arg.CreatedBy)
	var i R2Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteR2Group = `-- name: DeleteR2Group :exec
UPDATE r2_groups
SET 
  deleted_by = $1,
  deleted_at = now()
WHERE id = $2
`

type DeleteR2GroupParams struct {
	DeletedBy *string `json:"deleted_by"`
	ID        int32   `json:"id"`
}

func (q *Queries) DeleteR2Group(ctx context.Context, arg DeleteR2GroupParams) error {
	_, err := q.db.Exec(ctx, deleteR2Group, arg.DeletedBy, arg.ID)
	return err
}

const getR2GroupByID = `-- name: GetR2GroupByID :one
SELECT id, name, description, is_active, deleted_by, deleted_at, updated_by, updated_at, created_by, created_at FROM r2_groups
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetR2GroupByID(ctx context.Context, id int32) (R2Group, error) {
	row := q.db.QueryRow(ctx, getR2GroupByID, id)
	var i R2Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listR2Groups = `-- name: ListR2Groups :many
SELECT id, name, description, is_active, deleted_by, deleted_at, updated_by, updated_at, created_by, created_at FROM r2_groups
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListR2Groups(ctx context.Context) ([]R2Group, error) {
	rows, err := q.db.Query(ctx, listR2Groups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []R2Group{}
	for rows.Next() {
		var i R2Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateR2Group = `-- name: UpdateR2Group :one
UPDATE r2_groups
SET
  name        = COALESCE($1, name),
  description = COALESCE($2, description),
  is_active   = COALESCE($3, is_active),
  updated_by  = $4,
  updated_at  = now()
WHERE id = $5
RETURNING id, name, description, is_active, deleted_by, deleted_at, updated_by, updated_at, created_by, created_at
`

type UpdateR2GroupParams struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	IsActive    *bool   `json:"is_active"`
	UpdatedBy   *string `json:"updated_by"`
	ID          int32   `json:"id"`
}

func (q *Queries) UpdateR2Group(ctx context.Context, arg UpdateR2GroupParams) (R2Group, error) {
	row := q.db.QueryRow(ctx, updateR2Group,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.UpdatedBy,
		arg.ID,
	)
	var i R2Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
