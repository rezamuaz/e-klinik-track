// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 06_ruangan.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const countRuangan = `-- name: CountRuangan :one
SELECT COUNT(*)::bigint
FROM ruangan
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR nama_ruangan ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR fasilitas_id = $3::uuid)
  AND ($4::uuid IS NULL OR kontrak_id = $4::uuid)
`

type CountRuanganParams struct {
	NamaRuangan *string    `json:"nama_ruangan"`
	IsActive    *bool      `json:"is_active"`
	FasilitasID *uuid.UUID `json:"fasilitas_id"`
	KontrakID   *uuid.UUID `json:"kontrak_id"`
}

func (q *Queries) CountRuangan(ctx context.Context, arg CountRuanganParams) (int64, error) {
	row := q.db.QueryRow(ctx, countRuangan,
		arg.NamaRuangan,
		arg.IsActive,
		arg.FasilitasID,
		arg.KontrakID,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createRuangan = `-- name: CreateRuangan :one
INSERT INTO ruangan (
  fasilitas_id, kontrak_id, nama_ruangan, created_by
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, fasilitas_id, kontrak_id, nama_ruangan, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreateRuanganParams struct {
	FasilitasID uuid.UUID `json:"fasilitas_id"`
	KontrakID   uuid.UUID `json:"kontrak_id"`
	NamaRuangan string    `json:"nama_ruangan"`
	CreatedBy   *string   `json:"created_by"`
}

func (q *Queries) CreateRuangan(ctx context.Context, arg CreateRuanganParams) (Ruangan, error) {
	row := q.db.QueryRow(ctx, createRuangan,
		arg.FasilitasID,
		arg.KontrakID,
		arg.NamaRuangan,
		arg.CreatedBy,
	)
	var i Ruangan
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.NamaRuangan,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRuangan = `-- name: DeleteRuangan :exec
UPDATE ruangan
SET deleted_at = now(), deleted_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type DeleteRuanganParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteRuangan(ctx context.Context, arg DeleteRuanganParams) error {
	_, err := q.db.Exec(ctx, deleteRuangan, arg.ID, arg.DeletedBy)
	return err
}

const getRuangan = `-- name: GetRuangan :one
SELECT id, fasilitas_id, kontrak_id, nama_ruangan, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM ruangan
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetRuangan(ctx context.Context, id uuid.UUID) (Ruangan, error) {
	row := q.db.QueryRow(ctx, getRuangan, id)
	var i Ruangan
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.NamaRuangan,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listRuangan = `-- name: ListRuangan :many
SELECT
  id,
  fasilitas_id,
  kontrak_id,
  nama_ruangan,
  is_active,
  created_by,
  created_at
FROM ruangan
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR nama_ruangan ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR fasilitas_id = $3::uuid)
  AND ($4::uuid IS NULL OR kontrak_id = $4::uuid)
ORDER BY
  CASE WHEN $5::text = 'nama_ruangan' AND $6::text = 'asc'  THEN nama_ruangan END ASC,
  CASE WHEN $5::text = 'nama_ruangan' AND $6::text = 'desc' THEN nama_ruangan END DESC,
  CASE WHEN $5::text = 'created_at' AND $6::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $5::text = 'created_at' AND $6::text = 'desc' THEN created_at END DESC
LIMIT $8
OFFSET $7
`

type ListRuanganParams struct {
	NamaRuangan *string    `json:"nama_ruangan"`
	IsActive    *bool      `json:"is_active"`
	FasilitasID *uuid.UUID `json:"fasilitas_id"`
	KontrakID   *uuid.UUID `json:"kontrak_id"`
	OrderBy     *string    `json:"order_by"`
	Sort        *string    `json:"sort"`
	Offset      int32      `json:"offset"`
	Limit       int32      `json:"limit"`
}

type ListRuanganRow struct {
	ID          uuid.UUID          `json:"id"`
	FasilitasID uuid.UUID          `json:"fasilitas_id"`
	KontrakID   uuid.UUID          `json:"kontrak_id"`
	NamaRuangan string             `json:"nama_ruangan"`
	IsActive    bool               `json:"is_active"`
	CreatedBy   *string            `json:"created_by"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListRuangan(ctx context.Context, arg ListRuanganParams) ([]ListRuanganRow, error) {
	rows, err := q.db.Query(ctx, listRuangan,
		arg.NamaRuangan,
		arg.IsActive,
		arg.FasilitasID,
		arg.KontrakID,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRuanganRow{}
	for rows.Next() {
		var i ListRuanganRow
		if err := rows.Scan(
			&i.ID,
			&i.FasilitasID,
			&i.KontrakID,
			&i.NamaRuangan,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRuanganPartial = `-- name: UpdateRuanganPartial :one
UPDATE ruangan
SET
  fasilitas_id = COALESCE($2, fasilitas_id),
  kontrak_id   = COALESCE($3, kontrak_id),
  nama_ruangan = COALESCE($4, nama_ruangan),
  is_active    = COALESCE($5, is_active),
  updated_by   = COALESCE($6, updated_by),
  updated_note = COALESCE($7, updated_note),
  updated_at   = now()
WHERE id = $1
RETURNING id, fasilitas_id, kontrak_id, nama_ruangan, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateRuanganPartialParams struct {
	ID          uuid.UUID  `json:"id"`
	FasilitasID *uuid.UUID `json:"fasilitas_id"`
	KontrakID   *uuid.UUID `json:"kontrak_id"`
	NamaRuangan *string    `json:"nama_ruangan"`
	IsActive    *bool      `json:"is_active"`
	UpdatedBy   *string    `json:"updated_by"`
	UpdatedNote *string    `json:"updated_note"`
}

func (q *Queries) UpdateRuanganPartial(ctx context.Context, arg UpdateRuanganPartialParams) (Ruangan, error) {
	row := q.db.QueryRow(ctx, updateRuanganPartial,
		arg.ID,
		arg.FasilitasID,
		arg.KontrakID,
		arg.NamaRuangan,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
	)
	var i Ruangan
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.KontrakID,
		&i.NamaRuangan,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
