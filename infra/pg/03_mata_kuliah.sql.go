// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 03_mata_kuliah.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const countMataKuliah = `-- name: CountMataKuliah :one
SELECT COUNT(*)::bigint
FROM mata_kuliah
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR mata_kuliah ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
`

type CountMataKuliahParams struct {
	MataKuliah *string `json:"mata_kuliah"`
	IsActive   *bool   `json:"is_active"`
}

func (q *Queries) CountMataKuliah(ctx context.Context, arg CountMataKuliahParams) (int64, error) {
	row := q.db.QueryRow(ctx, countMataKuliah, arg.MataKuliah, arg.IsActive)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createMataKuliah = `-- name: CreateMataKuliah :one
INSERT INTO mata_kuliah (
  mata_kuliah,
  created_by
) VALUES (
  $1, $2
) RETURNING id, mata_kuliah, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreateMataKuliahParams struct {
	MataKuliah string  `json:"mata_kuliah"`
	CreatedBy  *string `json:"created_by"`
}

func (q *Queries) CreateMataKuliah(ctx context.Context, arg CreateMataKuliahParams) (MataKuliah, error) {
	row := q.db.QueryRow(ctx, createMataKuliah, arg.MataKuliah, arg.CreatedBy)
	var i MataKuliah
	err := row.Scan(
		&i.ID,
		&i.MataKuliah,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMataKuliah = `-- name: DeleteMataKuliah :exec
UPDATE mata_kuliah
SET deleted_at = now(), deleted_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type DeleteMataKuliahParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteMataKuliah(ctx context.Context, arg DeleteMataKuliahParams) error {
	_, err := q.db.Exec(ctx, deleteMataKuliah, arg.ID, arg.DeletedBy)
	return err
}

const getMataKuliah = `-- name: GetMataKuliah :one
SELECT id, mata_kuliah, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM mata_kuliah
WHERE id = $1
`

func (q *Queries) GetMataKuliah(ctx context.Context, id uuid.UUID) (MataKuliah, error) {
	row := q.db.QueryRow(ctx, getMataKuliah, id)
	var i MataKuliah
	err := row.Scan(
		&i.ID,
		&i.MataKuliah,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listMataKuliah = `-- name: ListMataKuliah :many
SELECT
  id,
  mata_kuliah,
  is_active,
  created_by,
  created_at
FROM mata_kuliah
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR mata_kuliah ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
ORDER BY
  CASE WHEN $3::text = 'mata_kuliah' AND $4::text = 'asc'  THEN mata_kuliah END ASC,
  CASE WHEN $3::text = 'mata_kuliah' AND $4::text = 'desc' THEN mata_kuliah END DESC,
  CASE WHEN $3::text = 'created_at' AND $4::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $3::text = 'created_at' AND $4::text = 'desc' THEN created_at END DESC
LIMIT $6
OFFSET $5
`

type ListMataKuliahParams struct {
	MataKuliah *string `json:"mata_kuliah"`
	IsActive   *bool   `json:"is_active"`
	OrderBy    *string `json:"order_by"`
	Sort       *string `json:"sort"`
	Offset     int32   `json:"offset"`
	Limit      int32   `json:"limit"`
}

type ListMataKuliahRow struct {
	ID         uuid.UUID          `json:"id"`
	MataKuliah string             `json:"mata_kuliah"`
	IsActive   bool               `json:"is_active"`
	CreatedBy  *string            `json:"created_by"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListMataKuliah(ctx context.Context, arg ListMataKuliahParams) ([]ListMataKuliahRow, error) {
	rows, err := q.db.Query(ctx, listMataKuliah,
		arg.MataKuliah,
		arg.IsActive,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMataKuliahRow{}
	for rows.Next() {
		var i ListMataKuliahRow
		if err := rows.Scan(
			&i.ID,
			&i.MataKuliah,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMataKuliah = `-- name: UpdateMataKuliah :one
UPDATE mata_kuliah
SET
  mata_kuliah = COALESCE($2, mata_kuliah),
  is_active   = COALESCE($3, is_active),
  updated_by  = COALESCE($4, updated_by),
  updated_note = COALESCE($5, updated_note),
  updated_at  = now()
WHERE id = $1
RETURNING id, mata_kuliah, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateMataKuliahParams struct {
	ID          uuid.UUID `json:"id"`
	MataKuliah  *string   `json:"mata_kuliah"`
	IsActive    *bool     `json:"is_active"`
	UpdatedBy   *string   `json:"updated_by"`
	UpdatedNote *string   `json:"updated_note"`
}

func (q *Queries) UpdateMataKuliah(ctx context.Context, arg UpdateMataKuliahParams) (MataKuliah, error) {
	row := q.db.QueryRow(ctx, updateMataKuliah,
		arg.ID,
		arg.MataKuliah,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
	)
	var i MataKuliah
	err := row.Scan(
		&i.ID,
		&i.MataKuliah,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
