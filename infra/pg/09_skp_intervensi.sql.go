// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 09_skp_intervensi.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
)

const listKategoriSubkategoriIntervensi = `-- name: ListKategoriSubkategoriIntervensi :many
SELECT
    k.id AS kategori_id,
    k.nama AS kategori_nama,
    s.id AS subkategori_id,
    s.nama AS subkategori_nama,
    i.id AS intervensi_id,
    i.nama AS intervensi_nama
FROM
    public.skp_intervensi i
JOIN
    public.skp_subkategori s ON i.subkategori_id = s.id
JOIN
    public.skp_kategori k ON i.kategori_id = k.id
ORDER BY
    k.nama, s.nama, i.nama
`

type ListKategoriSubkategoriIntervensiRow struct {
	KategoriID      uuid.UUID `json:"kategori_id"`
	KategoriNama    string    `json:"kategori_nama"`
	SubkategoriID   uuid.UUID `json:"subkategori_id"`
	SubkategoriNama string    `json:"subkategori_nama"`
	IntervensiID    uuid.UUID `json:"intervensi_id"`
	IntervensiNama  string    `json:"intervensi_nama"`
}

func (q *Queries) ListKategoriSubkategoriIntervensi(ctx context.Context) ([]ListKategoriSubkategoriIntervensiRow, error) {
	rows, err := q.db.Query(ctx, listKategoriSubkategoriIntervensi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListKategoriSubkategoriIntervensiRow{}
	for rows.Next() {
		var i ListKategoriSubkategoriIntervensiRow
		if err := rows.Scan(
			&i.KategoriID,
			&i.KategoriNama,
			&i.SubkategoriID,
			&i.SubkategoriNama,
			&i.IntervensiID,
			&i.IntervensiNama,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
