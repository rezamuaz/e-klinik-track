// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 05_fasilitas_kesehatan.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const countFasilitasKesehatan = `-- name: CountFasilitasKesehatan :one
SELECT COUNT(*)::bigint
FROM fasilitas_kesehatan
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR nama ILIKE '%' || $1 || '%')
  AND ($2::text IS NULL OR propinsi ILIKE '%' || $2 || '%')
  AND ($3::text IS NULL OR kab ILIKE '%' || $3 || '%')
  AND ($4::uuid IS NULL OR kab_id = $4::uuid)
  AND ($5::boolean IS NULL OR is_active = $5::boolean)
  AND ($6::text IS NULL OR tipe = $6::text)
`

type CountFasilitasKesehatanParams struct {
	Nama     *string    `json:"nama"`
	Propinsi *string    `json:"propinsi"`
	Kab      *string    `json:"kab"`
	KabID    *uuid.UUID `json:"kab_id"`
	IsActive *bool      `json:"is_active"`
	Tipe     *string    `json:"tipe"`
}

func (q *Queries) CountFasilitasKesehatan(ctx context.Context, arg CountFasilitasKesehatanParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFasilitasKesehatan,
		arg.Nama,
		arg.Propinsi,
		arg.Kab,
		arg.KabID,
		arg.IsActive,
		arg.Tipe,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createFasilitasKesehatan = `-- name: CreateFasilitasKesehatan :one
INSERT INTO fasilitas_kesehatan (
  nama, propinsi, kab, alamat, thumbnail, telepon, pemilik, kelas,
  longitude, latitude, gmap_name, gmap_address, gmap_thumbnail,
  similarity, tipe, is_active, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8,
  $9, $10, $11, $12, $13,
  $14, $15, COALESCE($16, true), $17
)
RETURNING id, nama, propinsi, propinsi_id, kab, kab_id, alamat, thumbnail, telepon, pemilik, kelas, longitude, latitude, gmap_name, gmap_address, gmap_thumbnail, similarity, tipe, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreateFasilitasKesehatanParams struct {
	Nama          string      `json:"nama"`
	Propinsi      *string     `json:"propinsi"`
	Kab           *string     `json:"kab"`
	Alamat        *string     `json:"alamat"`
	Thumbnail     *string     `json:"thumbnail"`
	Telepon       *string     `json:"telepon"`
	Pemilik       *string     `json:"pemilik"`
	Kelas         *string     `json:"kelas"`
	Longitude     *float64    `json:"longitude"`
	Latitude      *float64    `json:"latitude"`
	GmapName      *string     `json:"gmap_name"`
	GmapAddress   *string     `json:"gmap_address"`
	GmapThumbnail *string     `json:"gmap_thumbnail"`
	Similarity    *int32      `json:"similarity"`
	Tipe          *string     `json:"tipe"`
	Column16      interface{} `json:"column_16"`
	CreatedBy     *string     `json:"created_by"`
}

func (q *Queries) CreateFasilitasKesehatan(ctx context.Context, arg CreateFasilitasKesehatanParams) (FasilitasKesehatan, error) {
	row := q.db.QueryRow(ctx, createFasilitasKesehatan,
		arg.Nama,
		arg.Propinsi,
		arg.Kab,
		arg.Alamat,
		arg.Thumbnail,
		arg.Telepon,
		arg.Pemilik,
		arg.Kelas,
		arg.Longitude,
		arg.Latitude,
		arg.GmapName,
		arg.GmapAddress,
		arg.GmapThumbnail,
		arg.Similarity,
		arg.Tipe,
		arg.Column16,
		arg.CreatedBy,
	)
	var i FasilitasKesehatan
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Propinsi,
		&i.PropinsiID,
		&i.Kab,
		&i.KabID,
		&i.Alamat,
		&i.Thumbnail,
		&i.Telepon,
		&i.Pemilik,
		&i.Kelas,
		&i.Longitude,
		&i.Latitude,
		&i.GmapName,
		&i.GmapAddress,
		&i.GmapThumbnail,
		&i.Similarity,
		&i.Tipe,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFasilitasKesehatan = `-- name: DeleteFasilitasKesehatan :exec
UPDATE fasilitas_kesehatan
SET deleted_at = now(), deleted_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type DeleteFasilitasKesehatanParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteFasilitasKesehatan(ctx context.Context, arg DeleteFasilitasKesehatanParams) error {
	_, err := q.db.Exec(ctx, deleteFasilitasKesehatan, arg.ID, arg.DeletedBy)
	return err
}

const getFasilitasKesehatan = `-- name: GetFasilitasKesehatan :one
SELECT id, nama, propinsi, propinsi_id, kab, kab_id, alamat, thumbnail, telepon, pemilik, kelas, longitude, latitude, gmap_name, gmap_address, gmap_thumbnail, similarity, tipe, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM fasilitas_kesehatan
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetFasilitasKesehatan(ctx context.Context, id uuid.UUID) (FasilitasKesehatan, error) {
	row := q.db.QueryRow(ctx, getFasilitasKesehatan, id)
	var i FasilitasKesehatan
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Propinsi,
		&i.PropinsiID,
		&i.Kab,
		&i.KabID,
		&i.Alamat,
		&i.Thumbnail,
		&i.Telepon,
		&i.Pemilik,
		&i.Kelas,
		&i.Longitude,
		&i.Latitude,
		&i.GmapName,
		&i.GmapAddress,
		&i.GmapThumbnail,
		&i.Similarity,
		&i.Tipe,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listDistinctKabupaten = `-- name: ListDistinctKabupaten :many
SELECT id,nama
FROM kabupaten
WHERE ($3::text IS NULL OR nama ILIKE '%' || $3::text || '%')
  AND ($4::uuid IS NULL OR propinsi_id = $4::uuid)
ORDER BY nama ASC
LIMIT $1 OFFSET $2
`

type ListDistinctKabupatenParams struct {
	Limit      int32      `json:"limit"`
	Offset     int32      `json:"offset"`
	Nama       *string    `json:"nama"`
	PropinsiID *uuid.UUID `json:"propinsi_id"`
}

type ListDistinctKabupatenRow struct {
	ID   uuid.UUID `json:"id"`
	Nama string    `json:"nama"`
}

func (q *Queries) ListDistinctKabupaten(ctx context.Context, arg ListDistinctKabupatenParams) ([]ListDistinctKabupatenRow, error) {
	rows, err := q.db.Query(ctx, listDistinctKabupaten,
		arg.Limit,
		arg.Offset,
		arg.Nama,
		arg.PropinsiID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDistinctKabupatenRow{}
	for rows.Next() {
		var i ListDistinctKabupatenRow
		if err := rows.Scan(&i.ID, &i.Nama); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDistinctPropinsi = `-- name: ListDistinctPropinsi :many
SELECT id,nama
FROM propinsi
WHERE ($3::text IS NULL OR nama ILIKE '%' || $3::text || '%')
ORDER BY nama ASC
LIMIT $1 OFFSET $2
`

type ListDistinctPropinsiParams struct {
	Limit    int32   `json:"limit"`
	Offset   int32   `json:"offset"`
	Propinsi *string `json:"propinsi"`
}

type ListDistinctPropinsiRow struct {
	ID   uuid.UUID `json:"id"`
	Nama string    `json:"nama"`
}

func (q *Queries) ListDistinctPropinsi(ctx context.Context, arg ListDistinctPropinsiParams) ([]ListDistinctPropinsiRow, error) {
	rows, err := q.db.Query(ctx, listDistinctPropinsi, arg.Limit, arg.Offset, arg.Propinsi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDistinctPropinsiRow{}
	for rows.Next() {
		var i ListDistinctPropinsiRow
		if err := rows.Scan(&i.ID, &i.Nama); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFasilitasKesehatan = `-- name: ListFasilitasKesehatan :many
SELECT
  id,
  nama,
  propinsi,
  kab,
  alamat,
  thumbnail,
  telepon,
  pemilik,
  kelas,
  longitude,
  latitude,
  gmap_name,
  gmap_address,
  gmap_thumbnail,
  similarity,
  tipe,
  is_active,
  created_by,
  created_at
FROM fasilitas_kesehatan
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR nama ILIKE '%' || $1 || '%')
  AND ($2::text IS NULL OR propinsi ILIKE '%' || $2 || '%')
  AND ($3::uuid IS NULL OR kab_id = $3::uuid)
  AND ($4::text IS NULL OR kab ILIKE '%' || $4 || '%')
  AND ($5::boolean IS NULL OR is_active = $5::boolean)
  AND ($6::text IS NULL OR tipe = $6::text)
ORDER BY
  CASE WHEN $7::text = 'nama' AND $8::text = 'asc'  THEN nama END ASC,
  CASE WHEN $7::text = 'nama' AND $8::text = 'desc' THEN nama END DESC,
  CASE WHEN $7::text = 'created_at' AND $8::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $7::text = 'created_at' AND $8::text = 'desc' THEN created_at END DESC
LIMIT $10
OFFSET $9
`

type ListFasilitasKesehatanParams struct {
	Nama     *string    `json:"nama"`
	Propinsi *string    `json:"propinsi"`
	KabID    *uuid.UUID `json:"kab_id"`
	Kab      *string    `json:"kab"`
	IsActive *bool      `json:"is_active"`
	Tipe     *string    `json:"tipe"`
	OrderBy  *string    `json:"order_by"`
	Sort     *string    `json:"sort"`
	Offset   int32      `json:"offset"`
	Limit    int32      `json:"limit"`
}

type ListFasilitasKesehatanRow struct {
	ID            uuid.UUID          `json:"id"`
	Nama          string             `json:"nama"`
	Propinsi      *string            `json:"propinsi"`
	Kab           *string            `json:"kab"`
	Alamat        *string            `json:"alamat"`
	Thumbnail     *string            `json:"thumbnail"`
	Telepon       *string            `json:"telepon"`
	Pemilik       *string            `json:"pemilik"`
	Kelas         *string            `json:"kelas"`
	Longitude     *float64           `json:"longitude"`
	Latitude      *float64           `json:"latitude"`
	GmapName      *string            `json:"gmap_name"`
	GmapAddress   *string            `json:"gmap_address"`
	GmapThumbnail *string            `json:"gmap_thumbnail"`
	Similarity    *int32             `json:"similarity"`
	Tipe          *string            `json:"tipe"`
	IsActive      bool               `json:"is_active"`
	CreatedBy     *string            `json:"created_by"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListFasilitasKesehatan(ctx context.Context, arg ListFasilitasKesehatanParams) ([]ListFasilitasKesehatanRow, error) {
	rows, err := q.db.Query(ctx, listFasilitasKesehatan,
		arg.Nama,
		arg.Propinsi,
		arg.KabID,
		arg.Kab,
		arg.IsActive,
		arg.Tipe,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFasilitasKesehatanRow{}
	for rows.Next() {
		var i ListFasilitasKesehatanRow
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.Propinsi,
			&i.Kab,
			&i.Alamat,
			&i.Thumbnail,
			&i.Telepon,
			&i.Pemilik,
			&i.Kelas,
			&i.Longitude,
			&i.Latitude,
			&i.GmapName,
			&i.GmapAddress,
			&i.GmapThumbnail,
			&i.Similarity,
			&i.Tipe,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFasilitasKesehatanPartial = `-- name: UpdateFasilitasKesehatanPartial :one
UPDATE fasilitas_kesehatan
SET
  nama           = COALESCE($2, nama),
  propinsi       = COALESCE($3, propinsi),
  kab            = COALESCE($4, kab),
  alamat         = COALESCE($5, alamat),
  thumbnail      = COALESCE($6, thumbnail),
  telepon        = COALESCE($7, telepon),
  pemilik        = COALESCE($8, pemilik),
  kelas          = COALESCE($9, kelas),
  longitude      = COALESCE($10, longitude),
  latitude       = COALESCE($11, latitude),
  gmap_name      = COALESCE($12, gmap_name),
  gmap_address   = COALESCE($13, gmap_address),
  gmap_thumbnail = COALESCE($14, gmap_thumbnail),
  similarity     = COALESCE($15, similarity),
  tipe           = COALESCE($16, tipe),
  is_active      = COALESCE($17, is_active),
  updated_by     = COALESCE($18, updated_by),
  updated_note   = COALESCE($19, updated_note),
  updated_at     = now()
WHERE id = $1
RETURNING id, nama, propinsi, propinsi_id, kab, kab_id, alamat, thumbnail, telepon, pemilik, kelas, longitude, latitude, gmap_name, gmap_address, gmap_thumbnail, similarity, tipe, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateFasilitasKesehatanPartialParams struct {
	ID            uuid.UUID `json:"id"`
	Nama          *string   `json:"nama"`
	Propinsi      *string   `json:"propinsi"`
	Kab           *string   `json:"kab"`
	Alamat        *string   `json:"alamat"`
	Thumbnail     *string   `json:"thumbnail"`
	Telepon       *string   `json:"telepon"`
	Pemilik       *string   `json:"pemilik"`
	Kelas         *string   `json:"kelas"`
	Longitude     *float64  `json:"longitude"`
	Latitude      *float64  `json:"latitude"`
	GmapName      *string   `json:"gmap_name"`
	GmapAddress   *string   `json:"gmap_address"`
	GmapThumbnail *string   `json:"gmap_thumbnail"`
	Similarity    *int32    `json:"similarity"`
	Tipe          *string   `json:"tipe"`
	IsActive      *bool     `json:"is_active"`
	UpdatedBy     *string   `json:"updated_by"`
	UpdatedNote   *string   `json:"updated_note"`
}

func (q *Queries) UpdateFasilitasKesehatanPartial(ctx context.Context, arg UpdateFasilitasKesehatanPartialParams) (FasilitasKesehatan, error) {
	row := q.db.QueryRow(ctx, updateFasilitasKesehatanPartial,
		arg.ID,
		arg.Nama,
		arg.Propinsi,
		arg.Kab,
		arg.Alamat,
		arg.Thumbnail,
		arg.Telepon,
		arg.Pemilik,
		arg.Kelas,
		arg.Longitude,
		arg.Latitude,
		arg.GmapName,
		arg.GmapAddress,
		arg.GmapThumbnail,
		arg.Similarity,
		arg.Tipe,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
	)
	var i FasilitasKesehatan
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Propinsi,
		&i.PropinsiID,
		&i.Kab,
		&i.KabID,
		&i.Alamat,
		&i.Thumbnail,
		&i.Telepon,
		&i.Pemilik,
		&i.Kelas,
		&i.Longitude,
		&i.Latitude,
		&i.GmapName,
		&i.GmapAddress,
		&i.GmapThumbnail,
		&i.Similarity,
		&i.Tipe,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
