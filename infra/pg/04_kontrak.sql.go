// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 04_kontrak.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const countKontrak = `-- name: CountKontrak :one
SELECT COUNT(*)::bigint
FROM kontrak k
LEFT JOIN fasilitas_kesehatan f
  ON k.fasilitas_id = f.id
WHERE k.deleted_at IS NULL
  AND ($1::text IS NULL OR k.nama ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR k.is_active = $2::boolean)
  AND ($3::text IS NULL OR f.nama ILIKE '%' || $3 || '%')
  AND ($4::text IS NULL OR f.kab ILIKE '%' || $4 || '%')
  AND ($5::text IS NULL OR f.propinsi ILIKE '%' || $5 || '%')
  AND ($6::timestamptz IS NULL OR k.periode_mulai >= $6::timestamptz)
  AND ($7::timestamptz IS NULL OR k.periode_selesai <= $7::timestamptz)
`

type CountKontrakParams struct {
	Nama              *string            `json:"nama"`
	IsActive          *bool              `json:"is_active"`
	FasilitasNama     *string            `json:"fasilitas_nama"`
	FasilitasKab      *string            `json:"fasilitas_kab"`
	FasilitasPropinsi *string            `json:"fasilitas_propinsi"`
	PeriodeMulai      pgtype.Timestamptz `json:"periode_mulai"`
	PeriodeSelesai    pgtype.Timestamptz `json:"periode_selesai"`
}

func (q *Queries) CountKontrak(ctx context.Context, arg CountKontrakParams) (int64, error) {
	row := q.db.QueryRow(ctx, countKontrak,
		arg.Nama,
		arg.IsActive,
		arg.FasilitasNama,
		arg.FasilitasKab,
		arg.FasilitasPropinsi,
		arg.PeriodeMulai,
		arg.PeriodeSelesai,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createKontrak = `-- name: CreateKontrak :one
INSERT INTO kontrak (
  fasilitas_id,
  nama,
  periode_mulai,
  periode_selesai,
  durasi,
  deskripsi,
  created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, fasilitas_id, nama, periode_mulai, periode_selesai, durasi, deskripsi, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreateKontrakParams struct {
	FasilitasID    uuid.UUID          `json:"fasilitas_id"`
	Nama           string             `json:"nama"`
	PeriodeMulai   pgtype.Timestamptz `json:"periode_mulai"`
	PeriodeSelesai pgtype.Timestamptz `json:"periode_selesai"`
	Durasi         pgtype.Interval    `json:"durasi"`
	Deskripsi      *string            `json:"deskripsi"`
	CreatedBy      *string            `json:"created_by"`
}

func (q *Queries) CreateKontrak(ctx context.Context, arg CreateKontrakParams) (Kontrak, error) {
	row := q.db.QueryRow(ctx, createKontrak,
		arg.FasilitasID,
		arg.Nama,
		arg.PeriodeMulai,
		arg.PeriodeSelesai,
		arg.Durasi,
		arg.Deskripsi,
		arg.CreatedBy,
	)
	var i Kontrak
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.Nama,
		&i.PeriodeMulai,
		&i.PeriodeSelesai,
		&i.Durasi,
		&i.Deskripsi,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteKontrak = `-- name: DeleteKontrak :exec
UPDATE kontrak
SET
  deleted_by = $2,
  deleted_at = now()
WHERE id = $1
`

type DeleteKontrakParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteKontrak(ctx context.Context, arg DeleteKontrakParams) error {
	_, err := q.db.Exec(ctx, deleteKontrak, arg.ID, arg.DeletedBy)
	return err
}

const getKontrak = `-- name: GetKontrak :one
SELECT id, fasilitas_id, nama, periode_mulai, periode_selesai, durasi, deskripsi, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM kontrak
WHERE id = $1
`

func (q *Queries) GetKontrak(ctx context.Context, id uuid.UUID) (Kontrak, error) {
	row := q.db.QueryRow(ctx, getKontrak, id)
	var i Kontrak
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.Nama,
		&i.PeriodeMulai,
		&i.PeriodeSelesai,
		&i.Durasi,
		&i.Deskripsi,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listKontrak = `-- name: ListKontrak :many
SELECT
  k.id,
  k.fasilitas_id,
  k.nama,
  k.periode_mulai,
  k.periode_selesai,
  k.durasi,
  k.deskripsi,
  k.is_active,
  k.created_by,
  k.created_at,
  f.nama AS fasilitas_nama,
  f.kab AS fasilitas_kab,
  f.propinsi AS fasilitas_propinsi
FROM kontrak k
LEFT JOIN fasilitas_kesehatan f
  ON k.fasilitas_id = f.id
WHERE k.deleted_at IS NULL
  AND ($1::text IS NULL OR k.nama ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR k.is_active = $2::boolean)
  AND ($3::text IS NULL OR f.nama ILIKE '%' || $3 || '%')
  AND ($4::text IS NULL OR f.kab ILIKE '%' || $4 || '%')
  AND ($5::text IS NULL OR f.propinsi ILIKE '%' || $5 || '%')
  AND ($6::timestamptz IS NULL OR k.periode_mulai >= $6::timestamptz)
  AND ($7::timestamptz IS NULL OR k.periode_selesai <= $7::timestamptz)
ORDER BY
  CASE WHEN $8::text = 'nama' AND $9::text = 'asc'  THEN k.nama END ASC,
  CASE WHEN $8::text = 'nama' AND $9::text = 'desc' THEN k.nama END DESC,
  CASE WHEN $8::text = 'created_at' AND $9::text = 'asc'  THEN k.created_at END ASC,
  CASE WHEN $8::text = 'created_at' AND $9::text = 'desc' THEN k.created_at END DESC,
  CASE WHEN $8::text = 'periode_mulai' AND $9::text = 'asc'  THEN k.periode_mulai END ASC,
  CASE WHEN $8::text = 'periode_mulai' AND $9::text = 'desc' THEN k.periode_mulai END DESC,
  CASE WHEN $8::text = 'periode_selesai' AND $9::text = 'asc'  THEN k.periode_selesai END ASC,
  CASE WHEN $8::text = 'periode_selesai' AND $9::text = 'desc' THEN k.periode_selesai END DESC
LIMIT $11
OFFSET $10
`

type ListKontrakParams struct {
	Nama              *string            `json:"nama"`
	IsActive          *bool              `json:"is_active"`
	FasilitasNama     *string            `json:"fasilitas_nama"`
	FasilitasKab      *string            `json:"fasilitas_kab"`
	FasilitasPropinsi *string            `json:"fasilitas_propinsi"`
	PeriodeMulai      pgtype.Timestamptz `json:"periode_mulai"`
	PeriodeSelesai    pgtype.Timestamptz `json:"periode_selesai"`
	OrderBy           *string            `json:"order_by"`
	Sort              *string            `json:"sort"`
	Offset            int32              `json:"offset"`
	Limit             int32              `json:"limit"`
}

type ListKontrakRow struct {
	ID                uuid.UUID          `json:"id"`
	FasilitasID       uuid.UUID          `json:"fasilitas_id"`
	Nama              string             `json:"nama"`
	PeriodeMulai      pgtype.Timestamptz `json:"periode_mulai"`
	PeriodeSelesai    pgtype.Timestamptz `json:"periode_selesai"`
	Durasi            pgtype.Interval    `json:"durasi"`
	Deskripsi         *string            `json:"deskripsi"`
	IsActive          bool               `json:"is_active"`
	CreatedBy         *string            `json:"created_by"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	FasilitasNama     *string            `json:"fasilitas_nama"`
	FasilitasKab      *string            `json:"fasilitas_kab"`
	FasilitasPropinsi *string            `json:"fasilitas_propinsi"`
}

func (q *Queries) ListKontrak(ctx context.Context, arg ListKontrakParams) ([]ListKontrakRow, error) {
	rows, err := q.db.Query(ctx, listKontrak,
		arg.Nama,
		arg.IsActive,
		arg.FasilitasNama,
		arg.FasilitasKab,
		arg.FasilitasPropinsi,
		arg.PeriodeMulai,
		arg.PeriodeSelesai,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListKontrakRow{}
	for rows.Next() {
		var i ListKontrakRow
		if err := rows.Scan(
			&i.ID,
			&i.FasilitasID,
			&i.Nama,
			&i.PeriodeMulai,
			&i.PeriodeSelesai,
			&i.Durasi,
			&i.Deskripsi,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.FasilitasNama,
			&i.FasilitasKab,
			&i.FasilitasPropinsi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKontrakPartial = `-- name: UpdateKontrakPartial :one
UPDATE kontrak
SET
  nama            = COALESCE($2, nama),
  periode_mulai   = COALESCE($3, periode_mulai),
  periode_selesai = COALESCE($4, periode_selesai),
  durasi          = COALESCE($5, durasi),
  deskripsi       = COALESCE($6, deskripsi),
  is_active       = COALESCE($7, is_active),
  updated_by      = COALESCE($8, updated_by),
  updated_note    = COALESCE($9, updated_note),
  updated_at      = now()
WHERE id = $1
RETURNING id, fasilitas_id, nama, periode_mulai, periode_selesai, durasi, deskripsi, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateKontrakPartialParams struct {
	ID             uuid.UUID          `json:"id"`
	Nama           *string            `json:"nama"`
	PeriodeMulai   pgtype.Timestamptz `json:"periode_mulai"`
	PeriodeSelesai pgtype.Timestamptz `json:"periode_selesai"`
	Durasi         pgtype.Interval    `json:"durasi"`
	Deskripsi      *string            `json:"deskripsi"`
	IsActive       *bool              `json:"is_active"`
	UpdatedBy      *string            `json:"updated_by"`
	UpdatedNote    *string            `json:"updated_note"`
}

func (q *Queries) UpdateKontrakPartial(ctx context.Context, arg UpdateKontrakPartialParams) (Kontrak, error) {
	row := q.db.QueryRow(ctx, updateKontrakPartial,
		arg.ID,
		arg.Nama,
		arg.PeriodeMulai,
		arg.PeriodeSelesai,
		arg.Durasi,
		arg.Deskripsi,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
	)
	var i Kontrak
	err := row.Scan(
		&i.ID,
		&i.FasilitasID,
		&i.Nama,
		&i.PeriodeMulai,
		&i.PeriodeSelesai,
		&i.Durasi,
		&i.Deskripsi,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
