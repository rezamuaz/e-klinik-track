// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 12_resource_mapping.sql

package pg

import (
	"context"
)

const listResourceMappings = `-- name: ListResourceMappings :many
SELECT 
    path, 
    method, 
    resource_key, 
    action
FROM 
    r1_views WHERE view = 'data'
ORDER BY 
    path, method
`

type ListResourceMappingsRow struct {
	Path        *string `json:"path"`
	Method      *string `json:"method"`
	ResourceKey string  `json:"resource_key"`
	Action      string  `json:"action"`
}

func (q *Queries) ListResourceMappings(ctx context.Context) ([]ListResourceMappingsRow, error) {
	rows, err := q.db.Query(ctx, listResourceMappings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListResourceMappingsRow{}
	for rows.Next() {
		var i ListResourceMappingsRow
		if err := rows.Scan(
			&i.Path,
			&i.Method,
			&i.ResourceKey,
			&i.Action,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
