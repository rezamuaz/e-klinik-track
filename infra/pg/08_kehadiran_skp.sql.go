// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 08_kehadiran_skp.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const approveKehadiranSkpByIds = `-- name: ApproveKehadiranSkpByIds :exec
UPDATE public.kehadiran_skp
SET
  status = 'disetujui',
  locked = TRUE,
  updated_at = now(),
  updated_by = $1 -- Parameter opsional untuk menyimpan siapa yang melakukan update (misalnya user_id atau username)
WHERE
  id = ANY ($2::uuid[]) -- $1 adalah list UUID yang Anda masukkan
  AND deleted_at IS NULL
`

type ApproveKehadiranSkpByIdsParams struct {
	UpdatedBy      *string     `json:"updated_by"`
	SkpKehadiranID []uuid.UUID `json:"skp_kehadiran_id"`
}

func (q *Queries) ApproveKehadiranSkpByIds(ctx context.Context, arg ApproveKehadiranSkpByIdsParams) error {
	_, err := q.db.Exec(ctx, approveKehadiranSkpByIds, arg.UpdatedBy, arg.SkpKehadiranID)
	return err
}

const countKehadiranSkp = `-- name: CountKehadiranSkp :one
SELECT COUNT(*)::bigint
FROM kehadiran_skp
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR status ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR kehadiran_id = $3::uuid)
  AND ($4::uuid IS NULL OR skp_intervensi_id = $4::uuid)
`

type CountKehadiranSkpParams struct {
	Status          *string    `json:"status"`
	IsActive        *bool      `json:"is_active"`
	KehadiranID     *uuid.UUID `json:"kehadiran_id"`
	SkpIntervensiID *uuid.UUID `json:"skp_intervensi_id"`
}

func (q *Queries) CountKehadiranSkp(ctx context.Context, arg CountKehadiranSkpParams) (int64, error) {
	row := q.db.QueryRow(ctx, countKehadiranSkp,
		arg.Status,
		arg.IsActive,
		arg.KehadiranID,
		arg.SkpIntervensiID,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const deleteKehadiranSkp = `-- name: DeleteKehadiranSkp :exec
UPDATE kehadiran_skp
SET deleted_at = now(),
    deleted_by = $2
WHERE id = $1
  AND deleted_at IS NULL
`

type DeleteKehadiranSkpParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteKehadiranSkp(ctx context.Context, arg DeleteKehadiranSkpParams) error {
	_, err := q.db.Exec(ctx, deleteKehadiranSkp, arg.ID, arg.DeletedBy)
	return err
}

const getKehadiranSkp = `-- name: GetKehadiranSkp :one
SELECT id, kehadiran_id, skp_intervensi_id, user_id, status, is_active, locked, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
FROM kehadiran_skp
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetKehadiranSkp(ctx context.Context, id uuid.UUID) (KehadiranSkp, error) {
	row := q.db.QueryRow(ctx, getKehadiranSkp, id)
	var i KehadiranSkp
	err := row.Scan(
		&i.ID,
		&i.KehadiranID,
		&i.SkpIntervensiID,
		&i.UserID,
		&i.Status,
		&i.IsActive,
		&i.Locked,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const intervensiKehadiranID = `-- name: IntervensiKehadiranID :many
SELECT
ks.id,
  si.nama, 
  ks.skp_intervensi_id,
  ks.locked
FROM public.kehadiran_skp ks
LEFT JOIN public.skp_intervensi si
  ON ks.skp_intervensi_id = si.id
WHERE 
  ks.kehadiran_id = $1
  AND ks.is_active = TRUE
  AND ks.deleted_at IS NULL
ORDER BY ks.created_at DESC
`

type IntervensiKehadiranIDRow struct {
	ID              uuid.UUID `json:"id"`
	Nama            *string   `json:"nama"`
	SkpIntervensiID uuid.UUID `json:"skp_intervensi_id"`
	Locked          *bool     `json:"locked"`
}

func (q *Queries) IntervensiKehadiranID(ctx context.Context, kehadiranID uuid.UUID) ([]IntervensiKehadiranIDRow, error) {
	rows, err := q.db.Query(ctx, intervensiKehadiranID, kehadiranID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IntervensiKehadiranIDRow{}
	for rows.Next() {
		var i IntervensiKehadiranIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.SkpIntervensiID,
			&i.Locked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKehadiranSkp = `-- name: ListKehadiranSkp :many
SELECT
  id,
  kehadiran_id,
  skp_intervensi_id,
  status,
  is_active,
  created_by,
  created_at
FROM kehadiran_skp
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR status ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR kehadiran_id = $3::uuid)
  AND ($4::uuid IS NULL OR skp_intervensi_id = $4::uuid)
ORDER BY
  CASE WHEN $5::text = 'status' AND $6::text = 'asc'  THEN status END ASC,
  CASE WHEN $5::text = 'status' AND $6::text = 'desc' THEN status END DESC,
  CASE WHEN $5::text = 'created_at' AND $6::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $5::text = 'created_at' AND $6::text = 'desc' THEN created_at END DESC
LIMIT $8
OFFSET $7
`

type ListKehadiranSkpParams struct {
	Status          *string    `json:"status"`
	IsActive        *bool      `json:"is_active"`
	KehadiranID     *uuid.UUID `json:"kehadiran_id"`
	SkpIntervensiID *uuid.UUID `json:"skp_intervensi_id"`
	OrderBy         *string    `json:"order_by"`
	Sort            *string    `json:"sort"`
	Offset          int32      `json:"offset"`
	Limit           int32      `json:"limit"`
}

type ListKehadiranSkpRow struct {
	ID              uuid.UUID          `json:"id"`
	KehadiranID     uuid.UUID          `json:"kehadiran_id"`
	SkpIntervensiID uuid.UUID          `json:"skp_intervensi_id"`
	Status          *string            `json:"status"`
	IsActive        bool               `json:"is_active"`
	CreatedBy       *string            `json:"created_by"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListKehadiranSkp(ctx context.Context, arg ListKehadiranSkpParams) ([]ListKehadiranSkpRow, error) {
	rows, err := q.db.Query(ctx, listKehadiranSkp,
		arg.Status,
		arg.IsActive,
		arg.KehadiranID,
		arg.SkpIntervensiID,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListKehadiranSkpRow{}
	for rows.Next() {
		var i ListKehadiranSkpRow
		if err := rows.Scan(
			&i.ID,
			&i.KehadiranID,
			&i.SkpIntervensiID,
			&i.Status,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const skpKehadiranID = `-- name: SkpKehadiranID :many
SELECT skp_intervensi_id
FROM kehadiran_skp
WHERE kehadiran_id = $1
  AND is_active = true
  AND deleted_at IS NULL
ORDER BY created_at ASC
`

func (q *Queries) SkpKehadiranID(ctx context.Context, kehadiranID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, skpKehadiranID, kehadiranID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var skp_intervensi_id uuid.UUID
		if err := rows.Scan(&skp_intervensi_id); err != nil {
			return nil, err
		}
		items = append(items, skp_intervensi_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const syncKehadiranSkp = `-- name: SyncKehadiranSkp :many
WITH
input_data AS (
    SELECT 
        unnest($1::uuid[]) AS skp_intervensi_id,
        $2::uuid AS kehadiran_id,
        $3::uuid AS user_id,
        $4::varchar AS actor
),

inserted AS (
    INSERT INTO kehadiran_skp (
        kehadiran_id,
        skp_intervensi_id,
        user_id,
        created_by
    )
    SELECT 
        i.kehadiran_id,
        i.skp_intervensi_id,
        i.user_id,
        i.actor
    FROM input_data i
    LEFT JOIN kehadiran_skp k
      ON k.kehadiran_id = i.kehadiran_id 
     AND k.skp_intervensi_id = i.skp_intervensi_id
    WHERE k.id IS NULL                 -- belum ada baris
       OR k.locked = false             -- atau baris belum terkunci
    ON CONFLICT (kehadiran_id, skp_intervensi_id)
    DO NOTHING
    RETURNING kehadiran_skp.id, kehadiran_skp.kehadiran_id, kehadiran_skp.skp_intervensi_id, kehadiran_skp.user_id, kehadiran_skp.status, kehadiran_skp.is_active, kehadiran_skp.locked, kehadiran_skp.deleted_by, kehadiran_skp.deleted_at, kehadiran_skp.updated_note, kehadiran_skp.updated_by, kehadiran_skp.updated_at, kehadiran_skp.created_by, kehadiran_skp.created_at
),

deleted AS (
    DELETE FROM kehadiran_skp k
    WHERE k.kehadiran_id = $2
      AND k.locked = false
      AND k.skp_intervensi_id NOT IN (SELECT skp_intervensi_id FROM input_data)
    RETURNING k.id, k.kehadiran_id, k.skp_intervensi_id, k.user_id, k.status, k.is_active, k.locked, k.deleted_by, k.deleted_at, k.updated_note, k.updated_by, k.updated_at, k.created_by, k.created_at
)

SELECT id, kehadiran_id, skp_intervensi_id, user_id, status, is_active, locked, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM inserted
UNION ALL
SELECT id, kehadiran_id, skp_intervensi_id, user_id, status, is_active, locked, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at FROM deleted
`

type SyncKehadiranSkpParams struct {
	SkpIntervensiIds []uuid.UUID `json:"skp_intervensi_ids"`
	KehadiranID      uuid.UUID   `json:"kehadiran_id"`
	UserID           uuid.UUID   `json:"user_id"`
	Actor            string      `json:"actor"`
}

type SyncKehadiranSkpRow struct {
	ID              uuid.UUID          `json:"id"`
	KehadiranID     uuid.UUID          `json:"kehadiran_id"`
	SkpIntervensiID uuid.UUID          `json:"skp_intervensi_id"`
	UserID          uuid.UUID          `json:"user_id"`
	Status          *string            `json:"status"`
	IsActive        bool               `json:"is_active"`
	Locked          *bool              `json:"locked"`
	DeletedBy       *string            `json:"deleted_by"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
	UpdatedNote     *string            `json:"updated_note"`
	UpdatedBy       *string            `json:"updated_by"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	CreatedBy       *string            `json:"created_by"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

// 1️⃣ Data input user
// 2️⃣ Insert baru hanya jika:
//   - baris belum ada, atau
//   - belum locked
//
// 3️⃣ Hapus baris yang:
//   - tidak ada di input user
//   - tidak locked
//
// 4️⃣ Gabungkan hasil operasi insert + delete
func (q *Queries) SyncKehadiranSkp(ctx context.Context, arg SyncKehadiranSkpParams) ([]SyncKehadiranSkpRow, error) {
	rows, err := q.db.Query(ctx, syncKehadiranSkp,
		arg.SkpIntervensiIds,
		arg.KehadiranID,
		arg.UserID,
		arg.Actor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SyncKehadiranSkpRow{}
	for rows.Next() {
		var i SyncKehadiranSkpRow
		if err := rows.Scan(
			&i.ID,
			&i.KehadiranID,
			&i.SkpIntervensiID,
			&i.UserID,
			&i.Status,
			&i.IsActive,
			&i.Locked,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedNote,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKehadiranSkp = `-- name: UpdateKehadiranSkp :one
UPDATE kehadiran_skp
SET
  status       = COALESCE($1, status),
  is_active    = COALESCE($2, is_active),
  updated_by   = COALESCE($3, updated_by),
  updated_note = COALESCE($4, updated_note),
  updated_at   = now()
WHERE id = $5
  AND deleted_at IS NULL
RETURNING id, kehadiran_id, skp_intervensi_id, user_id, status, is_active, locked, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateKehadiranSkpParams struct {
	Status      *string   `json:"status"`
	IsActive    *bool     `json:"is_active"`
	UpdatedBy   *string   `json:"updated_by"`
	UpdatedNote *string   `json:"updated_note"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateKehadiranSkp(ctx context.Context, arg UpdateKehadiranSkpParams) (KehadiranSkp, error) {
	row := q.db.QueryRow(ctx, updateKehadiranSkp,
		arg.Status,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
		arg.ID,
	)
	var i KehadiranSkp
	err := row.Scan(
		&i.ID,
		&i.KehadiranID,
		&i.SkpIntervensiID,
		&i.UserID,
		&i.Status,
		&i.IsActive,
		&i.Locked,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
