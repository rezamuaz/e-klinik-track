// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: 08_kehadiran_skp.sql

package pg

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const countKehadiranSkp = `-- name: CountKehadiranSkp :one
SELECT COUNT(*)::bigint
FROM kehadiran_skp
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR status ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR kehadiran_id = $3::uuid)
  AND ($4::uuid IS NULL OR skp_intervensi_id = $4::uuid)
`

type CountKehadiranSkpParams struct {
	Status          *string    `json:"status"`
	IsActive        *bool      `json:"is_active"`
	KehadiranID     *uuid.UUID `json:"kehadiran_id"`
	SkpIntervensiID *uuid.UUID `json:"skp_intervensi_id"`
}

func (q *Queries) CountKehadiranSkp(ctx context.Context, arg CountKehadiranSkpParams) (int64, error) {
	row := q.db.QueryRow(ctx, countKehadiranSkp,
		arg.Status,
		arg.IsActive,
		arg.KehadiranID,
		arg.SkpIntervensiID,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createKehadiranSkp = `-- name: CreateKehadiranSkp :one
INSERT INTO kehadiran_skp (
    kehadiran_id,
    skp_intervensi_id,
    status,
    is_active,
    created_by
) VALUES (
    $1, $2, $3, COALESCE($4, true), $5
)
RETURNING id, kehadiran_id, skp_intervensi_id, status, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type CreateKehadiranSkpParams struct {
	KehadiranID     uuid.UUID   `json:"kehadiran_id"`
	SkpIntervensiID uuid.UUID   `json:"skp_intervensi_id"`
	Status          *string     `json:"status"`
	Column4         interface{} `json:"column_4"`
	CreatedBy       *string     `json:"created_by"`
}

func (q *Queries) CreateKehadiranSkp(ctx context.Context, arg CreateKehadiranSkpParams) (KehadiranSkp, error) {
	row := q.db.QueryRow(ctx, createKehadiranSkp,
		arg.KehadiranID,
		arg.SkpIntervensiID,
		arg.Status,
		arg.Column4,
		arg.CreatedBy,
	)
	var i KehadiranSkp
	err := row.Scan(
		&i.ID,
		&i.KehadiranID,
		&i.SkpIntervensiID,
		&i.Status,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteKehadiranSkp = `-- name: DeleteKehadiranSkp :exec
UPDATE kehadiran_skp
SET deleted_at = now(),
    deleted_by = $2
WHERE id = $1
  AND deleted_at IS NULL
`

type DeleteKehadiranSkpParams struct {
	ID        uuid.UUID `json:"id"`
	DeletedBy *string   `json:"deleted_by"`
}

func (q *Queries) DeleteKehadiranSkp(ctx context.Context, arg DeleteKehadiranSkpParams) error {
	_, err := q.db.Exec(ctx, deleteKehadiranSkp, arg.ID, arg.DeletedBy)
	return err
}

const getKehadiranSkp = `-- name: GetKehadiranSkp :one
SELECT id, kehadiran_id, skp_intervensi_id, status, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
FROM kehadiran_skp
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetKehadiranSkp(ctx context.Context, id uuid.UUID) (KehadiranSkp, error) {
	row := q.db.QueryRow(ctx, getKehadiranSkp, id)
	var i KehadiranSkp
	err := row.Scan(
		&i.ID,
		&i.KehadiranID,
		&i.SkpIntervensiID,
		&i.Status,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listKehadiranSkp = `-- name: ListKehadiranSkp :many
SELECT
  id,
  kehadiran_id,
  skp_intervensi_id,
  status,
  is_active,
  created_by,
  created_at
FROM kehadiran_skp
WHERE deleted_at IS NULL
  AND ($1::text IS NULL OR status ILIKE '%' || $1 || '%')
  AND ($2::boolean IS NULL OR is_active = $2::boolean)
  AND ($3::uuid IS NULL OR kehadiran_id = $3::uuid)
  AND ($4::uuid IS NULL OR skp_intervensi_id = $4::uuid)
ORDER BY
  CASE WHEN $5::text = 'status' AND $6::text = 'asc'  THEN status END ASC,
  CASE WHEN $5::text = 'status' AND $6::text = 'desc' THEN status END DESC,
  CASE WHEN $5::text = 'created_at' AND $6::text = 'asc'  THEN created_at END ASC,
  CASE WHEN $5::text = 'created_at' AND $6::text = 'desc' THEN created_at END DESC
LIMIT $8
OFFSET $7
`

type ListKehadiranSkpParams struct {
	Status          *string    `json:"status"`
	IsActive        *bool      `json:"is_active"`
	KehadiranID     *uuid.UUID `json:"kehadiran_id"`
	SkpIntervensiID *uuid.UUID `json:"skp_intervensi_id"`
	OrderBy         *string    `json:"order_by"`
	Sort            *string    `json:"sort"`
	Offset          int32      `json:"offset"`
	Limit           int32      `json:"limit"`
}

type ListKehadiranSkpRow struct {
	ID              uuid.UUID          `json:"id"`
	KehadiranID     uuid.UUID          `json:"kehadiran_id"`
	SkpIntervensiID uuid.UUID          `json:"skp_intervensi_id"`
	Status          *string            `json:"status"`
	IsActive        bool               `json:"is_active"`
	CreatedBy       *string            `json:"created_by"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListKehadiranSkp(ctx context.Context, arg ListKehadiranSkpParams) ([]ListKehadiranSkpRow, error) {
	rows, err := q.db.Query(ctx, listKehadiranSkp,
		arg.Status,
		arg.IsActive,
		arg.KehadiranID,
		arg.SkpIntervensiID,
		arg.OrderBy,
		arg.Sort,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListKehadiranSkpRow{}
	for rows.Next() {
		var i ListKehadiranSkpRow
		if err := rows.Scan(
			&i.ID,
			&i.KehadiranID,
			&i.SkpIntervensiID,
			&i.Status,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKehadiranSkp = `-- name: UpdateKehadiranSkp :one
UPDATE kehadiran_skp
SET
  status       = COALESCE($1, status),
  is_active    = COALESCE($2, is_active),
  updated_by   = COALESCE($3, updated_by),
  updated_note = COALESCE($4, updated_note),
  updated_at   = now()
WHERE id = $5
  AND deleted_at IS NULL
RETURNING id, kehadiran_id, skp_intervensi_id, status, is_active, deleted_by, deleted_at, updated_note, updated_by, updated_at, created_by, created_at
`

type UpdateKehadiranSkpParams struct {
	Status      *string   `json:"status"`
	IsActive    *bool     `json:"is_active"`
	UpdatedBy   *string   `json:"updated_by"`
	UpdatedNote *string   `json:"updated_note"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateKehadiranSkp(ctx context.Context, arg UpdateKehadiranSkpParams) (KehadiranSkp, error) {
	row := q.db.QueryRow(ctx, updateKehadiranSkp,
		arg.Status,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UpdatedNote,
		arg.ID,
	)
	var i KehadiranSkp
	err := row.Scan(
		&i.ID,
		&i.KehadiranID,
		&i.SkpIntervensiID,
		&i.Status,
		&i.IsActive,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedNote,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
