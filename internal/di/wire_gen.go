// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"e-klinik/api/handler"
	"e-klinik/config"
	"e-klinik/infra/worker"
	"e-klinik/internal/api"
	"e-klinik/internal/usecase"
	"e-klinik/pkg"
	"github.com/casbin/casbin/v2"
	"github.com/google/wire"
	"github.com/streadway/amqp"
)

// Injectors from wire.go:

// InitServer is the injector entry po int.
func Injector(cfg *config.Config, ch *amqp.Channel, pg *pkg.Postgres, cache *pkg.RistrettoCache, casbin2 *casbin.Enforcer) *pkg.Server {
	userUsecaseImpl := usecase.NewUserUsecase(pg, cfg, cache)
	authHandlerImpl := handler.NewAuthHandler(userUsecaseImpl, cfg)
	producerService := worker.NewQueueService(ch)
	mainUsecaseImpl := usecase.NewMainUsecase(pg, producerService)
	mainHandlerImpl := handler.NewMainHandler(mainUsecaseImpl, cfg)
	initialized := &api.Initialized{
		AuthHandler: authHandlerImpl,
		MainHandler: mainHandlerImpl,
	}
	server := api.NewApiRouter(cfg, initialized, casbin2)
	return server
}

// wire.go:

var usecaseSet = wire.NewSet(usecase.NewUserUsecase, wire.Bind(new(usecase.UserUsecase), new(*usecase.UserUsecaseImpl)), usecase.NewMainUsecase, wire.Bind(new(usecase.MainUsecase), new(*usecase.MainUsecaseImpl)))

var handlerSet = wire.NewSet(handler.NewAuthHandler, wire.Bind(new(handler.AuthHandler), new(*handler.AuthHandlerImpl)), handler.NewMainHandler, wire.Bind(new(handler.MainHandler), new(*handler.MainHandlerImpl)))
